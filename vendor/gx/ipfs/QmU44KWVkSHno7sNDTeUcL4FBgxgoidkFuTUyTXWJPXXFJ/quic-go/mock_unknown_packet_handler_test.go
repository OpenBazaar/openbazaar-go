// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lucas-clemente/quic-go (interfaces: UnknownPacketHandler)

// Package quic is a generated GoMock package.
package quic

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUnknownPacketHandler is a mock of UnknownPacketHandler interface
type MockUnknownPacketHandler struct {
	ctrl     *gomock.Controller
	recorder *MockUnknownPacketHandlerMockRecorder
}

// MockUnknownPacketHandlerMockRecorder is the mock recorder for MockUnknownPacketHandler
type MockUnknownPacketHandlerMockRecorder struct {
	mock *MockUnknownPacketHandler
}

// NewMockUnknownPacketHandler creates a new mock instance
func NewMockUnknownPacketHandler(ctrl *gomock.Controller) *MockUnknownPacketHandler {
	mock := &MockUnknownPacketHandler{ctrl: ctrl}
	mock.recorder = &MockUnknownPacketHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUnknownPacketHandler) EXPECT() *MockUnknownPacketHandlerMockRecorder {
	return m.recorder
}

// closeWithError mocks base method
func (m *MockUnknownPacketHandler) closeWithError(arg0 error) error {
	ret := m.ctrl.Call(m, "closeWithError", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// closeWithError indicates an expected call of closeWithError
func (mr *MockUnknownPacketHandlerMockRecorder) closeWithError(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "closeWithError", reflect.TypeOf((*MockUnknownPacketHandler)(nil).closeWithError), arg0)
}

// handlePacket mocks base method
func (m *MockUnknownPacketHandler) handlePacket(arg0 *receivedPacket) {
	m.ctrl.Call(m, "handlePacket", arg0)
}

// handlePacket indicates an expected call of handlePacket
func (mr *MockUnknownPacketHandlerMockRecorder) handlePacket(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handlePacket", reflect.TypeOf((*MockUnknownPacketHandler)(nil).handlePacket), arg0)
}
