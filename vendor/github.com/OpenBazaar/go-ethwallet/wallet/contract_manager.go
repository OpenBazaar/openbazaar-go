// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package wallet

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// RegistryABI is the input ABI used to generate the binding from.
const RegistryABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"contractName\",\"type\":\"string\"},{\"name\":\"versionName\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"addVersion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractName\",\"type\":\"string\"},{\"name\":\"versionName\",\"type\":\"string\"}],\"name\":\"markVersionAudited\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractName\",\"type\":\"string\"},{\"name\":\"versionName\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"changeStatus\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractName\",\"type\":\"string\"},{\"name\":\"versionName\",\"type\":\"string\"},{\"name\":\"bugLevel\",\"type\":\"uint8\"}],\"name\":\"changeBugLevel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalContractCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contractName\",\"type\":\"string\"}],\"name\":\"getRecommendedVersion\",\"outputs\":[{\"name\":\"versionName\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"bugLevel\",\"type\":\"uint8\"},{\"name\":\"implementation\",\"type\":\"address\"},{\"name\":\"audited\",\"type\":\"bool\"},{\"name\":\"dateAdded\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contractName\",\"type\":\"string\"},{\"name\":\"versionName\",\"type\":\"string\"}],\"name\":\"getVersionDetails\",\"outputs\":[{\"name\":\"versionString\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"uint8\"},{\"name\":\"bugLevel\",\"type\":\"uint8\"},{\"name\":\"implementation\",\"type\":\"address\"},{\"name\":\"audited\",\"type\":\"bool\"},{\"name\":\"dateAdded\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getContractAtIndex\",\"outputs\":[{\"name\":\"contractName\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractName\",\"type\":\"string\"}],\"name\":\"removeRecommendedVersion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contractName\",\"type\":\"string\"},{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getVersionAtIndex\",\"outputs\":[{\"name\":\"versionName\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractName\",\"type\":\"string\"},{\"name\":\"versionName\",\"type\":\"string\"}],\"name\":\"markRecommendedVersion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"contractName\",\"type\":\"string\"}],\"name\":\"getVersionCountForContract\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"versionName\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"VersionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"versionName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"StatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"versionName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"bugLevel\",\"type\":\"uint8\"}],\"name\":\"BugLevelChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"versionName\",\"type\":\"string\"}],\"name\":\"VersionAudited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"versionName\",\"type\":\"string\"}],\"name\":\"VersionRecommended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contractName\",\"type\":\"string\"}],\"name\":\"RecommendedVersionRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]=======openzeppelin-solidity/contracts/AddressUtils.sol:AddressUtils=======[]=======openzeppelin-solidity/contracts/ownership/Ownable.sol:Ownable=======[{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]"

// RegistryBin is the compiled bytecode used for deploying new contracts.
const RegistryBin = `6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506135fd806100536000396000f3006080604052600436106100db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633de5311a146100e0578063437fe3a3146101605780634890b0c5146101b3578063568d1ee814610213578063715018a614610273578063751f592b1461028a5780637e27634e146102b55780638ad030c1146103d85780638da5cb5b146105135780639b534f181461056a578063acd820a814610610578063af2c7fa314610679578063ca2e7cf314610737578063f2fde38b1461078a578063ff93dab4146107cd575b600080fd5b3480156100ec57600080fd5b5061015e600480360381019080803590602001908201803590602001919091929391929390803590602001908201803590602001919091929391929390803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061081c565b005b34801561016c57600080fd5b506101b1600480360381019080803590602001908201803590602001919091929391929390803590602001908201803590602001919091929391929390505050610fa4565b005b3480156101bf57600080fd5b50610211600480360381019080803590602001908201803590602001919091929391929390803590602001908201803590602001919091929391929390803560ff1690602001909291905050506114f5565b005b34801561021f57600080fd5b50610271600480360381019080803590602001908201803590602001919091929391929390803590602001908201803590602001919091929391929390803560ff169060200190929190505050611b89565b005b34801561027f57600080fd5b5061028861221e565b005b34801561029657600080fd5b5061029f612320565b6040518082815260200191505060405180910390f35b3480156102c157600080fd5b506102ee60048036038101908080359060200190820180359060200191909192939192939050505061232d565b604051808060200187600381111561030257fe5b60ff16815260200186600481111561031657fe5b60ff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184151515158152602001838152602001828103825288818151815260200191508051906020019080838360005b8381101561039857808201518184015260208101905061037d565b50505050905090810190601f1680156103c55780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b3480156103e457600080fd5b5061042960048036038101908080359060200190820180359060200191909192939192939080359060200190820180359060200191909192939192939050505061261e565b604051808060200187600381111561043d57fe5b60ff16815260200186600481111561045157fe5b60ff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184151515158152602001838152602001828103825288818151815260200191508051906020019080838360005b838110156104d35780820151818401526020810190506104b8565b50505050905090810190601f1680156105005780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b34801561051f57600080fd5b5061052861278a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561057657600080fd5b50610595600480360381019080803590602001909291905050506127af565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105d55780820151818401526020810190506105ba565b50505050905090810190601f1680156106025780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561061c57600080fd5b50610677600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061286a565b005b34801561068557600080fd5b506106bc60048036038101908080359060200190820180359060200191909192939192939080359060200190929190505050612aca565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106fc5780820151818401526020810190506106e1565b50505050905090810190601f1680156107295780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561074357600080fd5b50610788600480360381019080803590602001908201803590602001919091929391929390803590602001908201803590602001919091929391929390505050612baa565b005b34801561079657600080fd5b506107cb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506132bd565b005b3480156107d957600080fd5b50610806600480360381019080803590602001908201803590602001919091929391929390505050613324565b6040518082815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561087757600080fd5b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610943576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f5468652070726f7669646564206164647265737320697320612030206164647281526020017f657373000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6000858590501115156109be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f456d70747920737472696e67207061737365642061732076657273696f6e000081525060200191505060405180910390fd5b600087879050111515610a5f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f456d70747920737472696e672070617373656420617320636f6e74726163742081526020017f6e616d650000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b610a6882613357565b1515610b02576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260358152602001807f43616e6e6f7420736574206120696d706c656d656e746174696f6e20746f206181526020017f206e6f6e2d636f6e74726163742061646472657373000000000000000000000081525060400191505060405180910390fd5b6002878760405180838380828437820191505092505050908152602001604051809103902060009054906101000a900460ff161515610bbc576001878790918060018154018082558091505090600182039060005260206000200160009091929390919293909192909192509190610b7b929190613464565b505060016002888860405180838380828437820191505092505050908152602001604051809103902060006101000a81548160ff0219169083151502179055505b600073ffffffffffffffffffffffffffffffffffffffff1660048888604051808383808284378201915050925050509081526020016040518091039020868660405180838380828437820191505092505050908152602001604051809103902060010160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610cf1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f56657273696f6e20616c72656164792065786973747320666f7220636f6e747281526020017f616374000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60038787604051808383808284378201915050925050509081526020016040518091039020858590918060018154018082558091505090600182039060005260206000200160009091929390919293909192909192509190610d54929190613464565b505060c06040519081016040528086868080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050508152602001846003811115610da657fe5b815260200160006004811115610db857fe5b81526020018373ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001428152506004888860405180838380828437820191505092505050908152602001604051809103902086866040518083838082843782019150509250505090815260200160405180910390206000820151816000019080519060200190610e4a9291906134e4565b5060208201518160010160006101000a81548160ff02191690836003811115610e6f57fe5b021790555060408201518160010160016101000a81548160ff02191690836004811115610e9857fe5b021790555060608201518160010160026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160010160166101000a81548160ff02191690831515021790555060a082015181600201559050508173ffffffffffffffffffffffffffffffffffffffff167f337b109e3f497728f2bdd27545c9ed1cb52ed4a4103cc94da88b868879c982e2888888886040518080602001806020018381038352878782818152602001925080828437820191505083810382528585828181526020019250808284378201915050965050505050505060405180910390a250505050505050565b83838080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050506002816040518082805190602001908083835b60208310151561100f5780518252602082019150602081019050602083039250610fea565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff1615156110c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f436f6e747261637420646f6573206e6f7420657869737473000000000000000081525060200191505060405180910390fd5b84848080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505083838080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050600073ffffffffffffffffffffffffffffffffffffffff166004836040518082805190602001908083835b60208310151561117a5780518252602082019150602081019050602083039250611155565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020826040518082805190602001908083835b6020831015156111e357805182526020820191506020810190506020830392506111be565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156112ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f56657273696f6e20646f6573206e6f742065786973747320666f7220636f6e7481526020017f726163740000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561134757600080fd5b60048787604051808383808284378201915050925050509081526020016040518091039020858560405180838380828437820191505092505050908152602001604051809103902060010160169054906101000a900460ff16151515611415576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f56657273696f6e20697320616c7265616479206175646974656400000000000081525060200191505060405180910390fd5b600160048888604051808383808284378201915050925050509081526020016040518091039020868660405180838380828437820191505092505050908152602001604051809103902060010160166101000a81548160ff0219169083151502179055507fdd2996df4158c05ae76d843c929d03eadde75cf3580d1d2f996375ea6cbe9625878787876040518080602001806020018381038352878782818152602001925080828437820191505083810382528585828181526020019250808284378201915050965050505050505060405180910390a150505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561155257600080fd5b85858080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050506002816040518082805190602001908083835b6020831015156115bd5780518252602082019150602081019050602083039250611598565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff161515611672576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f436f6e747261637420646f6573206e6f7420657869737473000000000000000081525060200191505060405180910390fd5b86868080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505085858080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050600073ffffffffffffffffffffffffffffffffffffffff166004836040518082805190602001908083835b6020831015156117285780518252602082019150602081019050602083039250611703565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020826040518082805190602001908083835b602083101515611791578051825260208201915060208101905060208303925061176c565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561189a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f56657273696f6e20646f6573206e6f742065786973747320666f7220636f6e7481526020017f726163740000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6005898960405180838380828437820191505092505050908152602001604051809103902093508686604051602001808383808284378201915050925050506040516020818303038152906040526040518082805190602001908083835b60208310151561191d57805182526020820191506020810190506020830392506118f8565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019168460405160200180828054600181600116156101000203166002900480156119ad5780601f1061198b5761010080835404028352918201916119ad565b820191906000526020600020905b815481529060010190602001808311611999575b50509150506040516020818303038152906040526040518082805190602001908083835b6020831015156119f657805182526020820191506020810190506020830392506119d1565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916148015611a495750600380811115611a3b57fe5b856003811115611a4757fe5b145b15611a8a57611a8989898080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505061286a565b5b8460048a8a604051808383808284378201915050925050509081526020016040518091039020888860405180838380828437820191505092505050908152602001604051809103902060010160006101000a81548160ff02191690836003811115611af157fe5b02179055507ea1d2d212fdb196f10c2b940b5f032473f79d8fcf0739ae900d5767500213878989898989604051808060200180602001846003811115611b3357fe5b60ff168152602001838103835288888281815260200192508082843782019150508381038252868682818152602001925080828437820191505097505050505050505060405180910390a1505050505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611be657600080fd5b85858080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050506002816040518082805190602001908083835b602083101515611c515780518252602082019150602081019050602083039250611c2c565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff161515611d06576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f436f6e747261637420646f6573206e6f7420657869737473000000000000000081525060200191505060405180910390fd5b86868080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505085858080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050600073ffffffffffffffffffffffffffffffffffffffff166004836040518082805190602001908083835b602083101515611dbc5780518252602082019150602081019050602083039250611d97565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020826040518082805190602001908083835b602083101515611e255780518252602082019150602081019050602083039250611e00565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515611f2e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f56657273696f6e20646f6573206e6f742065786973747320666f7220636f6e7481526020017f726163740000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6005898960405180838380828437820191505092505050908152602001604051809103902093508686604051602001808383808284378201915050925050506040516020818303038152906040526040518082805190602001908083835b602083101515611fb15780518252602082019150602081019050602083039250611f8c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019168460405160200180828054600181600116156101000203166002900480156120415780601f1061201f576101008083540402835291820191612041565b820191906000526020600020905b81548152906001019060200180831161202d575b50509150506040516020818303038152906040526040518082805190602001908083835b60208310151561208a5780518252602082019150602081019050602083039250612065565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161480156120dd57506004808111156120cf57fe5b8560048111156120db57fe5b145b1561211e5761211d89898080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505061286a565b5b8460048a8a604051808383808284378201915050925050509081526020016040518091039020888860405180838380828437820191505092505050908152602001604051809103902060010160016101000a81548160ff0219169083600481111561218557fe5b02179055507f92d0e6a4dfcd933ffb179b251aa0d734eb16556c0813246989fddaf08a7d009d89898989896040518080602001806020018460048111156121c857fe5b60ff168152602001838103835288888281815260200192508082843782019150508381038252868682818152602001925080828437820191505097505050505050505060405180910390a1505050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561227957600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a260008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600180549050905090565b606060008060008060008088888080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050506002816040518082805190602001908083835b6020831015156123a3578051825260208201915060208101905060208303925061237e565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff161515612458576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f436f6e747261637420646f6573206e6f7420657869737473000000000000000081525060200191505060405180910390fd5b60058a8a6040518083838082843782019150509250505090815260200160405180910390208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156125115780601f106124e657610100808354040283529160200191612511565b820191906000526020600020905b8154815290600101906020018083116124f457829003601f168201915b5050505050975060048a8a604051808383808284378201915050925050509081526020016040518091039020886040518082805190602001908083835b602083101515612573578051825260208201915060208101905060208303925061254e565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902091508160010160009054906101000a900460ff1696508160010160019054906101000a900460ff1695508160010160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1694508160010160169054906101000a900460ff1693508160020154925050509295509295509295565b606060008060008060008060048b8b60405180838380828437820191505092505050908152602001604051809103902089896040518083838082843782019150509250505090815260200160405180910390209050806000018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561270b5780601f106126e05761010080835404028352916020019161270b565b820191906000526020600020905b8154815290600101906020018083116126ee57829003601f168201915b505050505096508060010160009054906101000a900460ff1695508060010160019054906101000a900460ff1694508060010160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1693508060010160169054906101000a900460ff16925080600201549150509499939850945094509450565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606001828154811015156127c057fe5b906000526020600020018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561285e5780601f106128335761010080835404028352916020019161285e565b820191906000526020600020905b81548152906001019060200180831161284157829003601f168201915b50505050509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156128c557600080fd5b806002816040518082805190602001908083835b6020831015156128fe57805182526020820191506020810190506020830392506128d9565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff1615156129b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f436f6e747261637420646f6573206e6f7420657869737473000000000000000081525060200191505060405180910390fd5b6005826040518082805190602001908083835b6020831015156129eb57805182526020820191506020810190506020830392506129c6565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000612a2a9190613564565b7f07b20feb74e0118ee3c73d4cb8d0eb4da169604c68aa233293b094cedcd225f2826040518080602001828103825283818151815260200191508051906020019080838360005b83811015612a8c578082015181840152602081019050612a71565b50505050905090810190601f168015612ab95780820380516001836020036101000a031916815260200191505b509250505060405180910390a15050565b60606003848460405180838380828437820191505092505050908152602001604051809103902082815481101515612afe57fe5b906000526020600020018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612b9c5780601f10612b7157610100808354040283529160200191612b9c565b820191906000526020600020905b815481529060010190602001808311612b7f57829003601f168201915b505050505090509392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612c0557600080fd5b83838080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050506002816040518082805190602001908083835b602083101515612c705780518252602082019150602081019050602083039250612c4b565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff161515612d25576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f436f6e747261637420646f6573206e6f7420657869737473000000000000000081525060200191505060405180910390fd5b84848080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505083838080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050600073ffffffffffffffffffffffffffffffffffffffff166004836040518082805190602001908083835b602083101515612ddb5780518252602082019150602081019050602083039250612db6565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020826040518082805190602001908083835b602083101515612e445780518252602082019150602081019050602083039250612e1f565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515612f4d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f56657273696f6e20646f6573206e6f742065786973747320666f7220636f6e7481526020017f726163740000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60026003811115612f5a57fe5b60048888604051808383808284378201915050925050509081526020016040518091039020868660405180838380828437820191505092505050908152602001604051809103902060010160009054906101000a900460ff166003811115612fbe57fe5b141515613033576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f56657273696f6e206e6f7420696e2070726f64756374696f6e2073746174650081525060200191505060405180910390fd5b60048787604051808383808284378201915050925050509081526020016040518091039020858560405180838380828437820191505092505050908152602001604051809103902060010160169054906101000a900460ff161515613100576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f56657273696f6e206973206e6f7420617564697465640000000000000000000081525060200191505060405180910390fd5b6003600481111561310d57fe5b60048888604051808383808284378201915050925050509081526020016040518091039020868660405180838380828437820191505092505050908152602001604051809103902060010160019054906101000a900460ff16600481111561317157fe5b10151561320c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f56657273696f6e20627567206c6576656c206973206e6f74206c6f776572207481526020017f68616e204849474800000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8484600589896040518083838082843782019150509250505090815260200160405180910390209190613240929190613464565b507fb318550bf93edf51de4bae84db3deabd2a866cc407435a72317ca2503e2a07a6878787876040518080602001806020018381038352878782818152602001925080828437820191505083810382528585828181526020019250808284378201915050965050505050505060405180910390a150505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561331857600080fd5b6133218161336a565b50565b60006003838360405180838380828437820191505092505050908152602001604051809103902080549050905092915050565b600080823b905060008111915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156133a657600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106134a557803560ff19168380011785556134d3565b828001600101855582156134d3579182015b828111156134d25782358255916020019190600101906134b7565b5b5090506134e091906135ac565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061352557805160ff1916838001178555613553565b82800160010185558215613553579182015b82811115613552578251825591602001919060010190613537565b5b50905061356091906135ac565b5090565b50805460018160011615610100020316600290046000825580601f1061358a57506135a9565b601f0160209004906000526020600020908101906135a891906135ac565b5b50565b6135ce91905b808211156135ca5760008160009055506001016135b2565b5090565b905600a165627a7a7230582043411908fd47ba5100d08696f88c2559a9f9c245c1d1214333c3824d4527f6250029

======= openzeppelin-solidity/contracts/AddressUtils.sol:AddressUtils =======
604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600080fd00a165627a7a72305820b82b9f028858f246861a7afebcfd2e199244bb9fb4819d8b1fa3d058c41b125e0029

======= openzeppelin-solidity/contracts/ownership/Ownable.sol:Ownable =======
608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506103c1806100606000396000f300608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063715018a61461005c5780638da5cb5b14610073578063f2fde38b146100ca575b600080fd5b34801561006857600080fd5b5061007161010d565b005b34801561007f57600080fd5b5061008861020f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156100d657600080fd5b5061010b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610234565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561016857600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a260008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561028f57600080fd5b6102988161029b565b50565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156102d757600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a7230582077e73d4b401459c2c062401742582a44912b8b235987c864fea6d190a5b48b600029`

// DeployRegistry deploys a new Ethereum contract, binding an instance of Registry to it.
func DeployRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Registry, error) {
	parsed, err := abi.JSON(strings.NewReader(RegistryABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(RegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// Registry is an auto generated Go binding around an Ethereum contract.
type Registry struct {
	RegistryCaller     // Read-only binding to the contract
	RegistryTransactor // Write-only binding to the contract
	RegistryFilterer   // Log filterer for contract events
}

// RegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type RegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RegistrySession struct {
	Contract     *Registry         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RegistryCallerSession struct {
	Contract *RegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// RegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RegistryTransactorSession struct {
	Contract     *RegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// RegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type RegistryRaw struct {
	Contract *Registry // Generic contract binding to access the raw methods on
}

// RegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RegistryCallerRaw struct {
	Contract *RegistryCaller // Generic read-only contract binding to access the raw methods on
}

// RegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RegistryTransactorRaw struct {
	Contract *RegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRegistry creates a new instance of Registry, bound to a specific deployed contract.
func NewRegistry(address common.Address, backend bind.ContractBackend) (*Registry, error) {
	contract, err := bindRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Registry{RegistryCaller: RegistryCaller{contract: contract}, RegistryTransactor: RegistryTransactor{contract: contract}, RegistryFilterer: RegistryFilterer{contract: contract}}, nil
}

// NewRegistryCaller creates a new read-only instance of Registry, bound to a specific deployed contract.
func NewRegistryCaller(address common.Address, caller bind.ContractCaller) (*RegistryCaller, error) {
	contract, err := bindRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryCaller{contract: contract}, nil
}

// NewRegistryTransactor creates a new write-only instance of Registry, bound to a specific deployed contract.
func NewRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*RegistryTransactor, error) {
	contract, err := bindRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryTransactor{contract: contract}, nil
}

// NewRegistryFilterer creates a new log filterer instance of Registry, bound to a specific deployed contract.
func NewRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*RegistryFilterer, error) {
	contract, err := bindRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RegistryFilterer{contract: contract}, nil
}

// bindRegistry binds a generic wrapper to an already deployed contract.
func bindRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RegistryABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.RegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.RegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Registry *RegistryCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Registry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Registry *RegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Registry *RegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Registry.Contract.contract.Transact(opts, method, params...)
}

// GetContractAtIndex is a free data retrieval call binding the contract method 0x9b534f18.
//
// Solidity: function getContractAtIndex(index uint256) constant returns(contractName string)
func (_Registry *RegistryCaller) GetContractAtIndex(opts *bind.CallOpts, index *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "getContractAtIndex", index)
	return *ret0, err
}

// GetContractAtIndex is a free data retrieval call binding the contract method 0x9b534f18.
//
// Solidity: function getContractAtIndex(index uint256) constant returns(contractName string)
func (_Registry *RegistrySession) GetContractAtIndex(index *big.Int) (string, error) {
	return _Registry.Contract.GetContractAtIndex(&_Registry.CallOpts, index)
}

// GetContractAtIndex is a free data retrieval call binding the contract method 0x9b534f18.
//
// Solidity: function getContractAtIndex(index uint256) constant returns(contractName string)
func (_Registry *RegistryCallerSession) GetContractAtIndex(index *big.Int) (string, error) {
	return _Registry.Contract.GetContractAtIndex(&_Registry.CallOpts, index)
}

// GetRecommendedVersion is a free data retrieval call binding the contract method 0x7e27634e.
//
// Solidity: function getRecommendedVersion(contractName string) constant returns(versionName string, status uint8, bugLevel uint8, implementation address, audited bool, dateAdded uint256)
func (_Registry *RegistryCaller) GetRecommendedVersion(opts *bind.CallOpts, contractName string) (struct {
	VersionName    string
	Status         uint8
	BugLevel       uint8
	Implementation common.Address
	Audited        bool
	DateAdded      *big.Int
}, error) {
	ret := new(struct {
		VersionName    string
		Status         uint8
		BugLevel       uint8
		Implementation common.Address
		Audited        bool
		DateAdded      *big.Int
	})
	out := ret
	err := _Registry.contract.Call(opts, out, "getRecommendedVersion", contractName)
	return *ret, err
}

// GetRecommendedVersion is a free data retrieval call binding the contract method 0x7e27634e.
//
// Solidity: function getRecommendedVersion(contractName string) constant returns(versionName string, status uint8, bugLevel uint8, implementation address, audited bool, dateAdded uint256)
func (_Registry *RegistrySession) GetRecommendedVersion(contractName string) (struct {
	VersionName    string
	Status         uint8
	BugLevel       uint8
	Implementation common.Address
	Audited        bool
	DateAdded      *big.Int
}, error) {
	return _Registry.Contract.GetRecommendedVersion(&_Registry.CallOpts, contractName)
}

// GetRecommendedVersion is a free data retrieval call binding the contract method 0x7e27634e.
//
// Solidity: function getRecommendedVersion(contractName string) constant returns(versionName string, status uint8, bugLevel uint8, implementation address, audited bool, dateAdded uint256)
func (_Registry *RegistryCallerSession) GetRecommendedVersion(contractName string) (struct {
	VersionName    string
	Status         uint8
	BugLevel       uint8
	Implementation common.Address
	Audited        bool
	DateAdded      *big.Int
}, error) {
	return _Registry.Contract.GetRecommendedVersion(&_Registry.CallOpts, contractName)
}

// GetTotalContractCount is a free data retrieval call binding the contract method 0x751f592b.
//
// Solidity: function getTotalContractCount() constant returns(count uint256)
func (_Registry *RegistryCaller) GetTotalContractCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "getTotalContractCount")
	return *ret0, err
}

// GetTotalContractCount is a free data retrieval call binding the contract method 0x751f592b.
//
// Solidity: function getTotalContractCount() constant returns(count uint256)
func (_Registry *RegistrySession) GetTotalContractCount() (*big.Int, error) {
	return _Registry.Contract.GetTotalContractCount(&_Registry.CallOpts)
}

// GetTotalContractCount is a free data retrieval call binding the contract method 0x751f592b.
//
// Solidity: function getTotalContractCount() constant returns(count uint256)
func (_Registry *RegistryCallerSession) GetTotalContractCount() (*big.Int, error) {
	return _Registry.Contract.GetTotalContractCount(&_Registry.CallOpts)
}

// GetVersionAtIndex is a free data retrieval call binding the contract method 0xaf2c7fa3.
//
// Solidity: function getVersionAtIndex(contractName string, index uint256) constant returns(versionName string)
func (_Registry *RegistryCaller) GetVersionAtIndex(opts *bind.CallOpts, contractName string, index *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "getVersionAtIndex", contractName, index)
	return *ret0, err
}

// GetVersionAtIndex is a free data retrieval call binding the contract method 0xaf2c7fa3.
//
// Solidity: function getVersionAtIndex(contractName string, index uint256) constant returns(versionName string)
func (_Registry *RegistrySession) GetVersionAtIndex(contractName string, index *big.Int) (string, error) {
	return _Registry.Contract.GetVersionAtIndex(&_Registry.CallOpts, contractName, index)
}

// GetVersionAtIndex is a free data retrieval call binding the contract method 0xaf2c7fa3.
//
// Solidity: function getVersionAtIndex(contractName string, index uint256) constant returns(versionName string)
func (_Registry *RegistryCallerSession) GetVersionAtIndex(contractName string, index *big.Int) (string, error) {
	return _Registry.Contract.GetVersionAtIndex(&_Registry.CallOpts, contractName, index)
}

// GetVersionCountForContract is a free data retrieval call binding the contract method 0xff93dab4.
//
// Solidity: function getVersionCountForContract(contractName string) constant returns(count uint256)
func (_Registry *RegistryCaller) GetVersionCountForContract(opts *bind.CallOpts, contractName string) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "getVersionCountForContract", contractName)
	return *ret0, err
}

// GetVersionCountForContract is a free data retrieval call binding the contract method 0xff93dab4.
//
// Solidity: function getVersionCountForContract(contractName string) constant returns(count uint256)
func (_Registry *RegistrySession) GetVersionCountForContract(contractName string) (*big.Int, error) {
	return _Registry.Contract.GetVersionCountForContract(&_Registry.CallOpts, contractName)
}

// GetVersionCountForContract is a free data retrieval call binding the contract method 0xff93dab4.
//
// Solidity: function getVersionCountForContract(contractName string) constant returns(count uint256)
func (_Registry *RegistryCallerSession) GetVersionCountForContract(contractName string) (*big.Int, error) {
	return _Registry.Contract.GetVersionCountForContract(&_Registry.CallOpts, contractName)
}

// GetVersionDetails is a free data retrieval call binding the contract method 0x8ad030c1.
//
// Solidity: function getVersionDetails(contractName string, versionName string) constant returns(versionString string, status uint8, bugLevel uint8, implementation address, audited bool, dateAdded uint256)
func (_Registry *RegistryCaller) GetVersionDetails(opts *bind.CallOpts, contractName string, versionName string) (struct {
	VersionString  string
	Status         uint8
	BugLevel       uint8
	Implementation common.Address
	Audited        bool
	DateAdded      *big.Int
}, error) {
	ret := new(struct {
		VersionString  string
		Status         uint8
		BugLevel       uint8
		Implementation common.Address
		Audited        bool
		DateAdded      *big.Int
	})
	out := ret
	err := _Registry.contract.Call(opts, out, "getVersionDetails", contractName, versionName)
	return *ret, err
}

// GetVersionDetails is a free data retrieval call binding the contract method 0x8ad030c1.
//
// Solidity: function getVersionDetails(contractName string, versionName string) constant returns(versionString string, status uint8, bugLevel uint8, implementation address, audited bool, dateAdded uint256)
func (_Registry *RegistrySession) GetVersionDetails(contractName string, versionName string) (struct {
	VersionString  string
	Status         uint8
	BugLevel       uint8
	Implementation common.Address
	Audited        bool
	DateAdded      *big.Int
}, error) {
	return _Registry.Contract.GetVersionDetails(&_Registry.CallOpts, contractName, versionName)
}

// GetVersionDetails is a free data retrieval call binding the contract method 0x8ad030c1.
//
// Solidity: function getVersionDetails(contractName string, versionName string) constant returns(versionString string, status uint8, bugLevel uint8, implementation address, audited bool, dateAdded uint256)
func (_Registry *RegistryCallerSession) GetVersionDetails(contractName string, versionName string) (struct {
	VersionString  string
	Status         uint8
	BugLevel       uint8
	Implementation common.Address
	Audited        bool
	DateAdded      *big.Int
}, error) {
	return _Registry.Contract.GetVersionDetails(&_Registry.CallOpts, contractName, versionName)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Registry *RegistryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Registry.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Registry *RegistrySession) Owner() (common.Address, error) {
	return _Registry.Contract.Owner(&_Registry.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Registry *RegistryCallerSession) Owner() (common.Address, error) {
	return _Registry.Contract.Owner(&_Registry.CallOpts)
}

// AddVersion is a paid mutator transaction binding the contract method 0x3de5311a.
//
// Solidity: function addVersion(contractName string, versionName string, status uint8, _implementation address) returns()
func (_Registry *RegistryTransactor) AddVersion(opts *bind.TransactOpts, contractName string, versionName string, status uint8, _implementation common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "addVersion", contractName, versionName, status, _implementation)
}

// AddVersion is a paid mutator transaction binding the contract method 0x3de5311a.
//
// Solidity: function addVersion(contractName string, versionName string, status uint8, _implementation address) returns()
func (_Registry *RegistrySession) AddVersion(contractName string, versionName string, status uint8, _implementation common.Address) (*types.Transaction, error) {
	return _Registry.Contract.AddVersion(&_Registry.TransactOpts, contractName, versionName, status, _implementation)
}

// AddVersion is a paid mutator transaction binding the contract method 0x3de5311a.
//
// Solidity: function addVersion(contractName string, versionName string, status uint8, _implementation address) returns()
func (_Registry *RegistryTransactorSession) AddVersion(contractName string, versionName string, status uint8, _implementation common.Address) (*types.Transaction, error) {
	return _Registry.Contract.AddVersion(&_Registry.TransactOpts, contractName, versionName, status, _implementation)
}

// ChangeBugLevel is a paid mutator transaction binding the contract method 0x568d1ee8.
//
// Solidity: function changeBugLevel(contractName string, versionName string, bugLevel uint8) returns()
func (_Registry *RegistryTransactor) ChangeBugLevel(opts *bind.TransactOpts, contractName string, versionName string, bugLevel uint8) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "changeBugLevel", contractName, versionName, bugLevel)
}

// ChangeBugLevel is a paid mutator transaction binding the contract method 0x568d1ee8.
//
// Solidity: function changeBugLevel(contractName string, versionName string, bugLevel uint8) returns()
func (_Registry *RegistrySession) ChangeBugLevel(contractName string, versionName string, bugLevel uint8) (*types.Transaction, error) {
	return _Registry.Contract.ChangeBugLevel(&_Registry.TransactOpts, contractName, versionName, bugLevel)
}

// ChangeBugLevel is a paid mutator transaction binding the contract method 0x568d1ee8.
//
// Solidity: function changeBugLevel(contractName string, versionName string, bugLevel uint8) returns()
func (_Registry *RegistryTransactorSession) ChangeBugLevel(contractName string, versionName string, bugLevel uint8) (*types.Transaction, error) {
	return _Registry.Contract.ChangeBugLevel(&_Registry.TransactOpts, contractName, versionName, bugLevel)
}

// ChangeStatus is a paid mutator transaction binding the contract method 0x4890b0c5.
//
// Solidity: function changeStatus(contractName string, versionName string, status uint8) returns()
func (_Registry *RegistryTransactor) ChangeStatus(opts *bind.TransactOpts, contractName string, versionName string, status uint8) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "changeStatus", contractName, versionName, status)
}

// ChangeStatus is a paid mutator transaction binding the contract method 0x4890b0c5.
//
// Solidity: function changeStatus(contractName string, versionName string, status uint8) returns()
func (_Registry *RegistrySession) ChangeStatus(contractName string, versionName string, status uint8) (*types.Transaction, error) {
	return _Registry.Contract.ChangeStatus(&_Registry.TransactOpts, contractName, versionName, status)
}

// ChangeStatus is a paid mutator transaction binding the contract method 0x4890b0c5.
//
// Solidity: function changeStatus(contractName string, versionName string, status uint8) returns()
func (_Registry *RegistryTransactorSession) ChangeStatus(contractName string, versionName string, status uint8) (*types.Transaction, error) {
	return _Registry.Contract.ChangeStatus(&_Registry.TransactOpts, contractName, versionName, status)
}

// MarkRecommendedVersion is a paid mutator transaction binding the contract method 0xca2e7cf3.
//
// Solidity: function markRecommendedVersion(contractName string, versionName string) returns()
func (_Registry *RegistryTransactor) MarkRecommendedVersion(opts *bind.TransactOpts, contractName string, versionName string) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "markRecommendedVersion", contractName, versionName)
}

// MarkRecommendedVersion is a paid mutator transaction binding the contract method 0xca2e7cf3.
//
// Solidity: function markRecommendedVersion(contractName string, versionName string) returns()
func (_Registry *RegistrySession) MarkRecommendedVersion(contractName string, versionName string) (*types.Transaction, error) {
	return _Registry.Contract.MarkRecommendedVersion(&_Registry.TransactOpts, contractName, versionName)
}

// MarkRecommendedVersion is a paid mutator transaction binding the contract method 0xca2e7cf3.
//
// Solidity: function markRecommendedVersion(contractName string, versionName string) returns()
func (_Registry *RegistryTransactorSession) MarkRecommendedVersion(contractName string, versionName string) (*types.Transaction, error) {
	return _Registry.Contract.MarkRecommendedVersion(&_Registry.TransactOpts, contractName, versionName)
}

// MarkVersionAudited is a paid mutator transaction binding the contract method 0x437fe3a3.
//
// Solidity: function markVersionAudited(contractName string, versionName string) returns()
func (_Registry *RegistryTransactor) MarkVersionAudited(opts *bind.TransactOpts, contractName string, versionName string) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "markVersionAudited", contractName, versionName)
}

// MarkVersionAudited is a paid mutator transaction binding the contract method 0x437fe3a3.
//
// Solidity: function markVersionAudited(contractName string, versionName string) returns()
func (_Registry *RegistrySession) MarkVersionAudited(contractName string, versionName string) (*types.Transaction, error) {
	return _Registry.Contract.MarkVersionAudited(&_Registry.TransactOpts, contractName, versionName)
}

// MarkVersionAudited is a paid mutator transaction binding the contract method 0x437fe3a3.
//
// Solidity: function markVersionAudited(contractName string, versionName string) returns()
func (_Registry *RegistryTransactorSession) MarkVersionAudited(contractName string, versionName string) (*types.Transaction, error) {
	return _Registry.Contract.MarkVersionAudited(&_Registry.TransactOpts, contractName, versionName)
}

// RemoveRecommendedVersion is a paid mutator transaction binding the contract method 0xacd820a8.
//
// Solidity: function removeRecommendedVersion(contractName string) returns()
func (_Registry *RegistryTransactor) RemoveRecommendedVersion(opts *bind.TransactOpts, contractName string) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "removeRecommendedVersion", contractName)
}

// RemoveRecommendedVersion is a paid mutator transaction binding the contract method 0xacd820a8.
//
// Solidity: function removeRecommendedVersion(contractName string) returns()
func (_Registry *RegistrySession) RemoveRecommendedVersion(contractName string) (*types.Transaction, error) {
	return _Registry.Contract.RemoveRecommendedVersion(&_Registry.TransactOpts, contractName)
}

// RemoveRecommendedVersion is a paid mutator transaction binding the contract method 0xacd820a8.
//
// Solidity: function removeRecommendedVersion(contractName string) returns()
func (_Registry *RegistryTransactorSession) RemoveRecommendedVersion(contractName string) (*types.Transaction, error) {
	return _Registry.Contract.RemoveRecommendedVersion(&_Registry.TransactOpts, contractName)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Registry *RegistryTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Registry *RegistrySession) RenounceOwnership() (*types.Transaction, error) {
	return _Registry.Contract.RenounceOwnership(&_Registry.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Registry *RegistryTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Registry.Contract.RenounceOwnership(&_Registry.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(_newOwner address) returns()
func (_Registry *RegistryTransactor) TransferOwnership(opts *bind.TransactOpts, _newOwner common.Address) (*types.Transaction, error) {
	return _Registry.contract.Transact(opts, "transferOwnership", _newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(_newOwner address) returns()
func (_Registry *RegistrySession) TransferOwnership(_newOwner common.Address) (*types.Transaction, error) {
	return _Registry.Contract.TransferOwnership(&_Registry.TransactOpts, _newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(_newOwner address) returns()
func (_Registry *RegistryTransactorSession) TransferOwnership(_newOwner common.Address) (*types.Transaction, error) {
	return _Registry.Contract.TransferOwnership(&_Registry.TransactOpts, _newOwner)
}

// RegistryBugLevelChangedIterator is returned from FilterBugLevelChanged and is used to iterate over the raw logs and unpacked data for BugLevelChanged events raised by the Registry contract.
type RegistryBugLevelChangedIterator struct {
	Event *RegistryBugLevelChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryBugLevelChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryBugLevelChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryBugLevelChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryBugLevelChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryBugLevelChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryBugLevelChanged represents a BugLevelChanged event raised by the Registry contract.
type RegistryBugLevelChanged struct {
	ContractName string
	VersionName  string
	BugLevel     uint8
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterBugLevelChanged is a free log retrieval operation binding the contract event 0x92d0e6a4dfcd933ffb179b251aa0d734eb16556c0813246989fddaf08a7d009d.
//
// Solidity: e BugLevelChanged(contractName string, versionName string, bugLevel uint8)
func (_Registry *RegistryFilterer) FilterBugLevelChanged(opts *bind.FilterOpts) (*RegistryBugLevelChangedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "BugLevelChanged")
	if err != nil {
		return nil, err
	}
	return &RegistryBugLevelChangedIterator{contract: _Registry.contract, event: "BugLevelChanged", logs: logs, sub: sub}, nil
}

// WatchBugLevelChanged is a free log subscription operation binding the contract event 0x92d0e6a4dfcd933ffb179b251aa0d734eb16556c0813246989fddaf08a7d009d.
//
// Solidity: e BugLevelChanged(contractName string, versionName string, bugLevel uint8)
func (_Registry *RegistryFilterer) WatchBugLevelChanged(opts *bind.WatchOpts, sink chan<- *RegistryBugLevelChanged) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "BugLevelChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryBugLevelChanged)
				if err := _Registry.contract.UnpackLog(event, "BugLevelChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// RegistryOwnershipRenouncedIterator is returned from FilterOwnershipRenounced and is used to iterate over the raw logs and unpacked data for OwnershipRenounced events raised by the Registry contract.
type RegistryOwnershipRenouncedIterator struct {
	Event *RegistryOwnershipRenounced // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryOwnershipRenouncedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryOwnershipRenounced)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryOwnershipRenounced)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryOwnershipRenouncedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryOwnershipRenouncedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryOwnershipRenounced represents a OwnershipRenounced event raised by the Registry contract.
type RegistryOwnershipRenounced struct {
	PreviousOwner common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipRenounced is a free log retrieval operation binding the contract event 0xf8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c64820.
//
// Solidity: e OwnershipRenounced(previousOwner indexed address)
func (_Registry *RegistryFilterer) FilterOwnershipRenounced(opts *bind.FilterOpts, previousOwner []common.Address) (*RegistryOwnershipRenouncedIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "OwnershipRenounced", previousOwnerRule)
	if err != nil {
		return nil, err
	}
	return &RegistryOwnershipRenouncedIterator{contract: _Registry.contract, event: "OwnershipRenounced", logs: logs, sub: sub}, nil
}

// WatchOwnershipRenounced is a free log subscription operation binding the contract event 0xf8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c64820.
//
// Solidity: e OwnershipRenounced(previousOwner indexed address)
func (_Registry *RegistryFilterer) WatchOwnershipRenounced(opts *bind.WatchOpts, sink chan<- *RegistryOwnershipRenounced, previousOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "OwnershipRenounced", previousOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryOwnershipRenounced)
				if err := _Registry.contract.UnpackLog(event, "OwnershipRenounced", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// RegistryOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Registry contract.
type RegistryOwnershipTransferredIterator struct {
	Event *RegistryOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryOwnershipTransferred represents a OwnershipTransferred event raised by the Registry contract.
type RegistryOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: e OwnershipTransferred(previousOwner indexed address, newOwner indexed address)
func (_Registry *RegistryFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*RegistryOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &RegistryOwnershipTransferredIterator{contract: _Registry.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: e OwnershipTransferred(previousOwner indexed address, newOwner indexed address)
func (_Registry *RegistryFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *RegistryOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryOwnershipTransferred)
				if err := _Registry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// RegistryRecommendedVersionRemovedIterator is returned from FilterRecommendedVersionRemoved and is used to iterate over the raw logs and unpacked data for RecommendedVersionRemoved events raised by the Registry contract.
type RegistryRecommendedVersionRemovedIterator struct {
	Event *RegistryRecommendedVersionRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryRecommendedVersionRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryRecommendedVersionRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryRecommendedVersionRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryRecommendedVersionRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryRecommendedVersionRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryRecommendedVersionRemoved represents a RecommendedVersionRemoved event raised by the Registry contract.
type RegistryRecommendedVersionRemoved struct {
	ContractName string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRecommendedVersionRemoved is a free log retrieval operation binding the contract event 0x07b20feb74e0118ee3c73d4cb8d0eb4da169604c68aa233293b094cedcd225f2.
//
// Solidity: e RecommendedVersionRemoved(contractName string)
func (_Registry *RegistryFilterer) FilterRecommendedVersionRemoved(opts *bind.FilterOpts) (*RegistryRecommendedVersionRemovedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "RecommendedVersionRemoved")
	if err != nil {
		return nil, err
	}
	return &RegistryRecommendedVersionRemovedIterator{contract: _Registry.contract, event: "RecommendedVersionRemoved", logs: logs, sub: sub}, nil
}

// WatchRecommendedVersionRemoved is a free log subscription operation binding the contract event 0x07b20feb74e0118ee3c73d4cb8d0eb4da169604c68aa233293b094cedcd225f2.
//
// Solidity: e RecommendedVersionRemoved(contractName string)
func (_Registry *RegistryFilterer) WatchRecommendedVersionRemoved(opts *bind.WatchOpts, sink chan<- *RegistryRecommendedVersionRemoved) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "RecommendedVersionRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryRecommendedVersionRemoved)
				if err := _Registry.contract.UnpackLog(event, "RecommendedVersionRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// RegistryStatusChangedIterator is returned from FilterStatusChanged and is used to iterate over the raw logs and unpacked data for StatusChanged events raised by the Registry contract.
type RegistryStatusChangedIterator struct {
	Event *RegistryStatusChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryStatusChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryStatusChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryStatusChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryStatusChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryStatusChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryStatusChanged represents a StatusChanged event raised by the Registry contract.
type RegistryStatusChanged struct {
	ContractName string
	VersionName  string
	Status       uint8
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterStatusChanged is a free log retrieval operation binding the contract event 0x00a1d2d212fdb196f10c2b940b5f032473f79d8fcf0739ae900d576750021387.
//
// Solidity: e StatusChanged(contractName string, versionName string, status uint8)
func (_Registry *RegistryFilterer) FilterStatusChanged(opts *bind.FilterOpts) (*RegistryStatusChangedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "StatusChanged")
	if err != nil {
		return nil, err
	}
	return &RegistryStatusChangedIterator{contract: _Registry.contract, event: "StatusChanged", logs: logs, sub: sub}, nil
}

// WatchStatusChanged is a free log subscription operation binding the contract event 0x00a1d2d212fdb196f10c2b940b5f032473f79d8fcf0739ae900d576750021387.
//
// Solidity: e StatusChanged(contractName string, versionName string, status uint8)
func (_Registry *RegistryFilterer) WatchStatusChanged(opts *bind.WatchOpts, sink chan<- *RegistryStatusChanged) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "StatusChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryStatusChanged)
				if err := _Registry.contract.UnpackLog(event, "StatusChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// RegistryVersionAddedIterator is returned from FilterVersionAdded and is used to iterate over the raw logs and unpacked data for VersionAdded events raised by the Registry contract.
type RegistryVersionAddedIterator struct {
	Event *RegistryVersionAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryVersionAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryVersionAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryVersionAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryVersionAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryVersionAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryVersionAdded represents a VersionAdded event raised by the Registry contract.
type RegistryVersionAdded struct {
	ContractName   string
	VersionName    string
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterVersionAdded is a free log retrieval operation binding the contract event 0x337b109e3f497728f2bdd27545c9ed1cb52ed4a4103cc94da88b868879c982e2.
//
// Solidity: e VersionAdded(contractName string, versionName string, implementation indexed address)
func (_Registry *RegistryFilterer) FilterVersionAdded(opts *bind.FilterOpts, implementation []common.Address) (*RegistryVersionAddedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _Registry.contract.FilterLogs(opts, "VersionAdded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RegistryVersionAddedIterator{contract: _Registry.contract, event: "VersionAdded", logs: logs, sub: sub}, nil
}

// WatchVersionAdded is a free log subscription operation binding the contract event 0x337b109e3f497728f2bdd27545c9ed1cb52ed4a4103cc94da88b868879c982e2.
//
// Solidity: e VersionAdded(contractName string, versionName string, implementation indexed address)
func (_Registry *RegistryFilterer) WatchVersionAdded(opts *bind.WatchOpts, sink chan<- *RegistryVersionAdded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _Registry.contract.WatchLogs(opts, "VersionAdded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryVersionAdded)
				if err := _Registry.contract.UnpackLog(event, "VersionAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// RegistryVersionAuditedIterator is returned from FilterVersionAudited and is used to iterate over the raw logs and unpacked data for VersionAudited events raised by the Registry contract.
type RegistryVersionAuditedIterator struct {
	Event *RegistryVersionAudited // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryVersionAuditedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryVersionAudited)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryVersionAudited)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryVersionAuditedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryVersionAuditedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryVersionAudited represents a VersionAudited event raised by the Registry contract.
type RegistryVersionAudited struct {
	ContractName string
	VersionName  string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionAudited is a free log retrieval operation binding the contract event 0xdd2996df4158c05ae76d843c929d03eadde75cf3580d1d2f996375ea6cbe9625.
//
// Solidity: e VersionAudited(contractName string, versionName string)
func (_Registry *RegistryFilterer) FilterVersionAudited(opts *bind.FilterOpts) (*RegistryVersionAuditedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "VersionAudited")
	if err != nil {
		return nil, err
	}
	return &RegistryVersionAuditedIterator{contract: _Registry.contract, event: "VersionAudited", logs: logs, sub: sub}, nil
}

// WatchVersionAudited is a free log subscription operation binding the contract event 0xdd2996df4158c05ae76d843c929d03eadde75cf3580d1d2f996375ea6cbe9625.
//
// Solidity: e VersionAudited(contractName string, versionName string)
func (_Registry *RegistryFilterer) WatchVersionAudited(opts *bind.WatchOpts, sink chan<- *RegistryVersionAudited) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "VersionAudited")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryVersionAudited)
				if err := _Registry.contract.UnpackLog(event, "VersionAudited", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// RegistryVersionRecommendedIterator is returned from FilterVersionRecommended and is used to iterate over the raw logs and unpacked data for VersionRecommended events raised by the Registry contract.
type RegistryVersionRecommendedIterator struct {
	Event *RegistryVersionRecommended // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryVersionRecommendedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryVersionRecommended)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryVersionRecommended)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryVersionRecommendedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryVersionRecommendedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryVersionRecommended represents a VersionRecommended event raised by the Registry contract.
type RegistryVersionRecommended struct {
	ContractName string
	VersionName  string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVersionRecommended is a free log retrieval operation binding the contract event 0xb318550bf93edf51de4bae84db3deabd2a866cc407435a72317ca2503e2a07a6.
//
// Solidity: e VersionRecommended(contractName string, versionName string)
func (_Registry *RegistryFilterer) FilterVersionRecommended(opts *bind.FilterOpts) (*RegistryVersionRecommendedIterator, error) {

	logs, sub, err := _Registry.contract.FilterLogs(opts, "VersionRecommended")
	if err != nil {
		return nil, err
	}
	return &RegistryVersionRecommendedIterator{contract: _Registry.contract, event: "VersionRecommended", logs: logs, sub: sub}, nil
}

// WatchVersionRecommended is a free log subscription operation binding the contract event 0xb318550bf93edf51de4bae84db3deabd2a866cc407435a72317ca2503e2a07a6.
//
// Solidity: e VersionRecommended(contractName string, versionName string)
func (_Registry *RegistryFilterer) WatchVersionRecommended(opts *bind.WatchOpts, sink chan<- *RegistryVersionRecommended) (event.Subscription, error) {

	logs, sub, err := _Registry.contract.WatchLogs(opts, "VersionRecommended")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryVersionRecommended)
				if err := _Registry.contract.UnpackLog(event, "VersionRecommended", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
