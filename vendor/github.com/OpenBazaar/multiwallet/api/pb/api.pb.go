// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CoinType int32

const (
	CoinType_BITCOIN      CoinType = 0
	CoinType_BITCOIN_CASH CoinType = 1
	CoinType_ZCASH        CoinType = 2
	CoinType_LITECOIN     CoinType = 3
	CoinType_ETHEREUM     CoinType = 4
)

var CoinType_name = map[int32]string{
	0: "BITCOIN",
	1: "BITCOIN_CASH",
	2: "ZCASH",
	3: "LITECOIN",
	4: "ETHEREUM",
}
var CoinType_value = map[string]int32{
	"BITCOIN":      0,
	"BITCOIN_CASH": 1,
	"ZCASH":        2,
	"LITECOIN":     3,
	"ETHEREUM":     4,
}

func (x CoinType) String() string {
	return proto.EnumName(CoinType_name, int32(x))
}
func (CoinType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_2ff753dddd9b028a, []int{0}
}

type KeyPurpose int32

const (
	KeyPurpose_INTERNAL KeyPurpose = 0
	KeyPurpose_EXTERNAL KeyPurpose = 1
)

var KeyPurpose_name = map[int32]string{
	0: "INTERNAL",
	1: "EXTERNAL",
}
var KeyPurpose_value = map[string]int32{
	"INTERNAL": 0,
	"EXTERNAL": 1,
}

func (x KeyPurpose) String() string {
	return proto.EnumName(KeyPurpose_name, int32(x))
}
func (KeyPurpose) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_2ff753dddd9b028a, []int{1}
}

type FeeLevel int32

const (
	FeeLevel_ECONOMIC FeeLevel = 0
	FeeLevel_NORMAL   FeeLevel = 1
	FeeLevel_PRIORITY FeeLevel = 2
)

var FeeLevel_name = map[int32]string{
	0: "ECONOMIC",
	1: "NORMAL",
	2: "PRIORITY",
}
var FeeLevel_value = map[string]int32{
	"ECONOMIC": 0,
	"NORMAL":   1,
	"PRIORITY": 2,
}

func (x FeeLevel) String() string {
	return proto.EnumName(FeeLevel_name, int32(x))
}
func (FeeLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_api_2ff753dddd9b028a, []int{2}
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2ff753dddd9b028a, []int{0}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type CoinSelection struct {
	Coin                 CoinType `protobuf:"varint,1,opt,name=coin,proto3,enum=pb.CoinType" json:"coin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoinSelection) Reset()         { *m = CoinSelection{} }
func (m *CoinSelection) String() string { return proto.CompactTextString(m) }
func (*CoinSelection) ProtoMessage()    {}
func (*CoinSelection) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2ff753dddd9b028a, []int{1}
}
func (m *CoinSelection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoinSelection.Unmarshal(m, b)
}
func (m *CoinSelection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoinSelection.Marshal(b, m, deterministic)
}
func (dst *CoinSelection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinSelection.Merge(dst, src)
}
func (m *CoinSelection) XXX_Size() int {
	return xxx_messageInfo_CoinSelection.Size(m)
}
func (m *CoinSelection) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinSelection.DiscardUnknown(m)
}

var xxx_messageInfo_CoinSelection proto.InternalMessageInfo

func (m *CoinSelection) GetCoin() CoinType {
	if m != nil {
		return m.Coin
	}
	return CoinType_BITCOIN
}

type Row struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Row) Reset()         { *m = Row{} }
func (m *Row) String() string { return proto.CompactTextString(m) }
func (*Row) ProtoMessage()    {}
func (*Row) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2ff753dddd9b028a, []int{2}
}
func (m *Row) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Row.Unmarshal(m, b)
}
func (m *Row) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Row.Marshal(b, m, deterministic)
}
func (dst *Row) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Row.Merge(dst, src)
}
func (m *Row) XXX_Size() int {
	return xxx_messageInfo_Row.Size(m)
}
func (m *Row) XXX_DiscardUnknown() {
	xxx_messageInfo_Row.DiscardUnknown(m)
}

var xxx_messageInfo_Row proto.InternalMessageInfo

func (m *Row) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type KeySelection struct {
	Coin                 CoinType   `protobuf:"varint,1,opt,name=coin,proto3,enum=pb.CoinType" json:"coin,omitempty"`
	Purpose              KeyPurpose `protobuf:"varint,2,opt,name=purpose,proto3,enum=pb.KeyPurpose" json:"purpose,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *KeySelection) Reset()         { *m = KeySelection{} }
func (m *KeySelection) String() string { return proto.CompactTextString(m) }
func (*KeySelection) ProtoMessage()    {}
func (*KeySelection) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2ff753dddd9b028a, []int{3}
}
func (m *KeySelection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeySelection.Unmarshal(m, b)
}
func (m *KeySelection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeySelection.Marshal(b, m, deterministic)
}
func (dst *KeySelection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeySelection.Merge(dst, src)
}
func (m *KeySelection) XXX_Size() int {
	return xxx_messageInfo_KeySelection.Size(m)
}
func (m *KeySelection) XXX_DiscardUnknown() {
	xxx_messageInfo_KeySelection.DiscardUnknown(m)
}

var xxx_messageInfo_KeySelection proto.InternalMessageInfo

func (m *KeySelection) GetCoin() CoinType {
	if m != nil {
		return m.Coin
	}
	return CoinType_BITCOIN
}

func (m *KeySelection) GetPurpose() KeyPurpose {
	if m != nil {
		return m.Purpose
	}
	return KeyPurpose_INTERNAL
}

type Address struct {
	Coin                 CoinType `protobuf:"varint,1,opt,name=coin,proto3,enum=pb.CoinType" json:"coin,omitempty"`
	Addr                 string   `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2ff753dddd9b028a, []int{4}
}
func (m *Address) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Address.Unmarshal(m, b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Address.Marshal(b, m, deterministic)
}
func (dst *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(dst, src)
}
func (m *Address) XXX_Size() int {
	return xxx_messageInfo_Address.Size(m)
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetCoin() CoinType {
	if m != nil {
		return m.Coin
	}
	return CoinType_BITCOIN
}

func (m *Address) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type Height struct {
	Height               uint32   `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Height) Reset()         { *m = Height{} }
func (m *Height) String() string { return proto.CompactTextString(m) }
func (*Height) ProtoMessage()    {}
func (*Height) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2ff753dddd9b028a, []int{5}
}
func (m *Height) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Height.Unmarshal(m, b)
}
func (m *Height) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Height.Marshal(b, m, deterministic)
}
func (dst *Height) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Height.Merge(dst, src)
}
func (m *Height) XXX_Size() int {
	return xxx_messageInfo_Height.Size(m)
}
func (m *Height) XXX_DiscardUnknown() {
	xxx_messageInfo_Height.DiscardUnknown(m)
}

var xxx_messageInfo_Height proto.InternalMessageInfo

func (m *Height) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

type Balances struct {
	Confirmed            uint64   `protobuf:"varint,1,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	Unconfirmed          uint64   `protobuf:"varint,2,opt,name=unconfirmed,proto3" json:"unconfirmed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Balances) Reset()         { *m = Balances{} }
func (m *Balances) String() string { return proto.CompactTextString(m) }
func (*Balances) ProtoMessage()    {}
func (*Balances) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2ff753dddd9b028a, []int{6}
}
func (m *Balances) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Balances.Unmarshal(m, b)
}
func (m *Balances) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Balances.Marshal(b, m, deterministic)
}
func (dst *Balances) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Balances.Merge(dst, src)
}
func (m *Balances) XXX_Size() int {
	return xxx_messageInfo_Balances.Size(m)
}
func (m *Balances) XXX_DiscardUnknown() {
	xxx_messageInfo_Balances.DiscardUnknown(m)
}

var xxx_messageInfo_Balances proto.InternalMessageInfo

func (m *Balances) GetConfirmed() uint64 {
	if m != nil {
		return m.Confirmed
	}
	return 0
}

func (m *Balances) GetUnconfirmed() uint64 {
	if m != nil {
		return m.Unconfirmed
	}
	return 0
}

type Key struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Key) Reset()         { *m = Key{} }
func (m *Key) String() string { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()    {}
func (*Key) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2ff753dddd9b028a, []int{7}
}
func (m *Key) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Key.Unmarshal(m, b)
}
func (m *Key) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Key.Marshal(b, m, deterministic)
}
func (dst *Key) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Key.Merge(dst, src)
}
func (m *Key) XXX_Size() int {
	return xxx_messageInfo_Key.Size(m)
}
func (m *Key) XXX_DiscardUnknown() {
	xxx_messageInfo_Key.DiscardUnknown(m)
}

var xxx_messageInfo_Key proto.InternalMessageInfo

func (m *Key) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type Keys struct {
	Keys                 []*Key   `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Keys) Reset()         { *m = Keys{} }
func (m *Keys) String() string { return proto.CompactTextString(m) }
func (*Keys) ProtoMessage()    {}
func (*Keys) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2ff753dddd9b028a, []int{8}
}
func (m *Keys) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Keys.Unmarshal(m, b)
}
func (m *Keys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Keys.Marshal(b, m, deterministic)
}
func (dst *Keys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Keys.Merge(dst, src)
}
func (m *Keys) XXX_Size() int {
	return xxx_messageInfo_Keys.Size(m)
}
func (m *Keys) XXX_DiscardUnknown() {
	xxx_messageInfo_Keys.DiscardUnknown(m)
}

var xxx_messageInfo_Keys proto.InternalMessageInfo

func (m *Keys) GetKeys() []*Key {
	if m != nil {
		return m.Keys
	}
	return nil
}

type Addresses struct {
	Addresses            []*Address `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Addresses) Reset()         { *m = Addresses{} }
func (m *Addresses) String() string { return proto.CompactTextString(m) }
func (*Addresses) ProtoMessage()    {}
func (*Addresses) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2ff753dddd9b028a, []int{9}
}
func (m *Addresses) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Addresses.Unmarshal(m, b)
}
func (m *Addresses) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Addresses.Marshal(b, m, deterministic)
}
func (dst *Addresses) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Addresses.Merge(dst, src)
}
func (m *Addresses) XXX_Size() int {
	return xxx_messageInfo_Addresses.Size(m)
}
func (m *Addresses) XXX_DiscardUnknown() {
	xxx_messageInfo_Addresses.DiscardUnknown(m)
}

var xxx_messageInfo_Addresses proto.InternalMessageInfo

func (m *Addresses) GetAddresses() []*Address {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type BoolResponse struct {
	Bool                 bool     `protobuf:"varint,1,opt,name=bool,proto3" json:"bool,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BoolResponse) Reset()         { *m = BoolResponse{} }
func (m *BoolResponse) String() string { return proto.CompactTextString(m) }
func (*BoolResponse) ProtoMessage()    {}
func (*BoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2ff753dddd9b028a, []int{10}
}
func (m *BoolResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BoolResponse.Unmarshal(m, b)
}
func (m *BoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BoolResponse.Marshal(b, m, deterministic)
}
func (dst *BoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoolResponse.Merge(dst, src)
}
func (m *BoolResponse) XXX_Size() int {
	return xxx_messageInfo_BoolResponse.Size(m)
}
func (m *BoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BoolResponse proto.InternalMessageInfo

func (m *BoolResponse) GetBool() bool {
	if m != nil {
		return m.Bool
	}
	return false
}

type NetParams struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetParams) Reset()         { *m = NetParams{} }
func (m *NetParams) String() string { return proto.CompactTextString(m) }
func (*NetParams) ProtoMessage()    {}
func (*NetParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2ff753dddd9b028a, []int{11}
}
func (m *NetParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetParams.Unmarshal(m, b)
}
func (m *NetParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetParams.Marshal(b, m, deterministic)
}
func (dst *NetParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetParams.Merge(dst, src)
}
func (m *NetParams) XXX_Size() int {
	return xxx_messageInfo_NetParams.Size(m)
}
func (m *NetParams) XXX_DiscardUnknown() {
	xxx_messageInfo_NetParams.DiscardUnknown(m)
}

var xxx_messageInfo_NetParams proto.InternalMessageInfo

func (m *NetParams) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type TransactionList struct {
	Transactions         []*Tx    `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransactionList) Reset()         { *m = TransactionList{} }
func (m *TransactionList) String() string { return proto.CompactTextString(m) }
func (*TransactionList) ProtoMessage()    {}
func (*TransactionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2ff753dddd9b028a, []int{12}
}
func (m *TransactionList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionList.Unmarshal(m, b)
}
func (m *TransactionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionList.Marshal(b, m, deterministic)
}
func (dst *TransactionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionList.Merge(dst, src)
}
func (m *TransactionList) XXX_Size() int {
	return xxx_messageInfo_TransactionList.Size(m)
}
func (m *TransactionList) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionList.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionList proto.InternalMessageInfo

func (m *TransactionList) GetTransactions() []*Tx {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type Tx struct {
	Txid                 string               `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Value                int64                `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	Height               int32                `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	WatchOnly            bool                 `protobuf:"varint,5,opt,name=watchOnly,proto3" json:"watchOnly,omitempty"`
	Raw                  []byte               `protobuf:"bytes,6,opt,name=raw,proto3" json:"raw,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Tx) Reset()         { *m = Tx{} }
func (m *Tx) String() string { return proto.CompactTextString(m) }
func (*Tx) ProtoMessage()    {}
func (*Tx) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2ff753dddd9b028a, []int{13}
}
func (m *Tx) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tx.Unmarshal(m, b)
}
func (m *Tx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tx.Marshal(b, m, deterministic)
}
func (dst *Tx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tx.Merge(dst, src)
}
func (m *Tx) XXX_Size() int {
	return xxx_messageInfo_Tx.Size(m)
}
func (m *Tx) XXX_DiscardUnknown() {
	xxx_messageInfo_Tx.DiscardUnknown(m)
}

var xxx_messageInfo_Tx proto.InternalMessageInfo

func (m *Tx) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (m *Tx) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Tx) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Tx) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Tx) GetWatchOnly() bool {
	if m != nil {
		return m.WatchOnly
	}
	return false
}

func (m *Tx) GetRaw() []byte {
	if m != nil {
		return m.Raw
	}
	return nil
}

type Txid struct {
	Coin                 CoinType `protobuf:"varint,1,opt,name=coin,proto3,enum=pb.CoinType" json:"coin,omitempty"`
	Hash                 string   `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Txid) Reset()         { *m = Txid{} }
func (m *Txid) String() string { return proto.CompactTextString(m) }
func (*Txid) ProtoMessage()    {}
func (*Txid) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2ff753dddd9b028a, []int{14}
}
func (m *Txid) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Txid.Unmarshal(m, b)
}
func (m *Txid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Txid.Marshal(b, m, deterministic)
}
func (dst *Txid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Txid.Merge(dst, src)
}
func (m *Txid) XXX_Size() int {
	return xxx_messageInfo_Txid.Size(m)
}
func (m *Txid) XXX_DiscardUnknown() {
	xxx_messageInfo_Txid.DiscardUnknown(m)
}

var xxx_messageInfo_Txid proto.InternalMessageInfo

func (m *Txid) GetCoin() CoinType {
	if m != nil {
		return m.Coin
	}
	return CoinType_BITCOIN
}

func (m *Txid) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type FeeLevelSelection struct {
	Coin                 CoinType `protobuf:"varint,1,opt,name=coin,proto3,enum=pb.CoinType" json:"coin,omitempty"`
	FeeLevel             FeeLevel `protobuf:"varint,2,opt,name=feeLevel,proto3,enum=pb.FeeLevel" json:"feeLevel,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeeLevelSelection) Reset()         { *m = FeeLevelSelection{} }
func (m *FeeLevelSelection) String() string { return proto.CompactTextString(m) }
func (*FeeLevelSelection) ProtoMessage()    {}
func (*FeeLevelSelection) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2ff753dddd9b028a, []int{15}
}
func (m *FeeLevelSelection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeeLevelSelection.Unmarshal(m, b)
}
func (m *FeeLevelSelection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeeLevelSelection.Marshal(b, m, deterministic)
}
func (dst *FeeLevelSelection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeLevelSelection.Merge(dst, src)
}
func (m *FeeLevelSelection) XXX_Size() int {
	return xxx_messageInfo_FeeLevelSelection.Size(m)
}
func (m *FeeLevelSelection) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeLevelSelection.DiscardUnknown(m)
}

var xxx_messageInfo_FeeLevelSelection proto.InternalMessageInfo

func (m *FeeLevelSelection) GetCoin() CoinType {
	if m != nil {
		return m.Coin
	}
	return CoinType_BITCOIN
}

func (m *FeeLevelSelection) GetFeeLevel() FeeLevel {
	if m != nil {
		return m.FeeLevel
	}
	return FeeLevel_ECONOMIC
}

type FeePerByte struct {
	Fee                  uint64   `protobuf:"varint,1,opt,name=fee,proto3" json:"fee,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeePerByte) Reset()         { *m = FeePerByte{} }
func (m *FeePerByte) String() string { return proto.CompactTextString(m) }
func (*FeePerByte) ProtoMessage()    {}
func (*FeePerByte) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2ff753dddd9b028a, []int{16}
}
func (m *FeePerByte) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeePerByte.Unmarshal(m, b)
}
func (m *FeePerByte) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeePerByte.Marshal(b, m, deterministic)
}
func (dst *FeePerByte) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeePerByte.Merge(dst, src)
}
func (m *FeePerByte) XXX_Size() int {
	return xxx_messageInfo_FeePerByte.Size(m)
}
func (m *FeePerByte) XXX_DiscardUnknown() {
	xxx_messageInfo_FeePerByte.DiscardUnknown(m)
}

var xxx_messageInfo_FeePerByte proto.InternalMessageInfo

func (m *FeePerByte) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

type Fee struct {
	Fee                  uint64   `protobuf:"varint,1,opt,name=fee,proto3" json:"fee,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Fee) Reset()         { *m = Fee{} }
func (m *Fee) String() string { return proto.CompactTextString(m) }
func (*Fee) ProtoMessage()    {}
func (*Fee) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2ff753dddd9b028a, []int{17}
}
func (m *Fee) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Fee.Unmarshal(m, b)
}
func (m *Fee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Fee.Marshal(b, m, deterministic)
}
func (dst *Fee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fee.Merge(dst, src)
}
func (m *Fee) XXX_Size() int {
	return xxx_messageInfo_Fee.Size(m)
}
func (m *Fee) XXX_DiscardUnknown() {
	xxx_messageInfo_Fee.DiscardUnknown(m)
}

var xxx_messageInfo_Fee proto.InternalMessageInfo

func (m *Fee) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

type SpendInfo struct {
	Coin                 CoinType `protobuf:"varint,1,opt,name=coin,proto3,enum=pb.CoinType" json:"coin,omitempty"`
	Address              string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Amount               uint64   `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	FeeLevel             FeeLevel `protobuf:"varint,4,opt,name=feeLevel,proto3,enum=pb.FeeLevel" json:"feeLevel,omitempty"`
	Memo                 string   `protobuf:"bytes,5,opt,name=memo,proto3" json:"memo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpendInfo) Reset()         { *m = SpendInfo{} }
func (m *SpendInfo) String() string { return proto.CompactTextString(m) }
func (*SpendInfo) ProtoMessage()    {}
func (*SpendInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2ff753dddd9b028a, []int{18}
}
func (m *SpendInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpendInfo.Unmarshal(m, b)
}
func (m *SpendInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpendInfo.Marshal(b, m, deterministic)
}
func (dst *SpendInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpendInfo.Merge(dst, src)
}
func (m *SpendInfo) XXX_Size() int {
	return xxx_messageInfo_SpendInfo.Size(m)
}
func (m *SpendInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SpendInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SpendInfo proto.InternalMessageInfo

func (m *SpendInfo) GetCoin() CoinType {
	if m != nil {
		return m.Coin
	}
	return CoinType_BITCOIN
}

func (m *SpendInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *SpendInfo) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *SpendInfo) GetFeeLevel() FeeLevel {
	if m != nil {
		return m.FeeLevel
	}
	return FeeLevel_ECONOMIC
}

func (m *SpendInfo) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type Confirmations struct {
	Confirmations        uint32   `protobuf:"varint,1,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Confirmations) Reset()         { *m = Confirmations{} }
func (m *Confirmations) String() string { return proto.CompactTextString(m) }
func (*Confirmations) ProtoMessage()    {}
func (*Confirmations) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2ff753dddd9b028a, []int{19}
}
func (m *Confirmations) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Confirmations.Unmarshal(m, b)
}
func (m *Confirmations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Confirmations.Marshal(b, m, deterministic)
}
func (dst *Confirmations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Confirmations.Merge(dst, src)
}
func (m *Confirmations) XXX_Size() int {
	return xxx_messageInfo_Confirmations.Size(m)
}
func (m *Confirmations) XXX_DiscardUnknown() {
	xxx_messageInfo_Confirmations.DiscardUnknown(m)
}

var xxx_messageInfo_Confirmations proto.InternalMessageInfo

func (m *Confirmations) GetConfirmations() uint32 {
	if m != nil {
		return m.Confirmations
	}
	return 0
}

type Utxo struct {
	Txid                 string   `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Index                uint32   `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Value                uint64   `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Utxo) Reset()         { *m = Utxo{} }
func (m *Utxo) String() string { return proto.CompactTextString(m) }
func (*Utxo) ProtoMessage()    {}
func (*Utxo) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2ff753dddd9b028a, []int{20}
}
func (m *Utxo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Utxo.Unmarshal(m, b)
}
func (m *Utxo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Utxo.Marshal(b, m, deterministic)
}
func (dst *Utxo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Utxo.Merge(dst, src)
}
func (m *Utxo) XXX_Size() int {
	return xxx_messageInfo_Utxo.Size(m)
}
func (m *Utxo) XXX_DiscardUnknown() {
	xxx_messageInfo_Utxo.DiscardUnknown(m)
}

var xxx_messageInfo_Utxo proto.InternalMessageInfo

func (m *Utxo) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (m *Utxo) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Utxo) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type SweepInfo struct {
	Coin                 CoinType `protobuf:"varint,1,opt,name=coin,proto3,enum=pb.CoinType" json:"coin,omitempty"`
	Utxos                []*Utxo  `protobuf:"bytes,2,rep,name=utxos,proto3" json:"utxos,omitempty"`
	Address              string   `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Key                  string   `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	RedeemScript         []byte   `protobuf:"bytes,5,opt,name=redeemScript,proto3" json:"redeemScript,omitempty"`
	FeeLevel             FeeLevel `protobuf:"varint,6,opt,name=feeLevel,proto3,enum=pb.FeeLevel" json:"feeLevel,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SweepInfo) Reset()         { *m = SweepInfo{} }
func (m *SweepInfo) String() string { return proto.CompactTextString(m) }
func (*SweepInfo) ProtoMessage()    {}
func (*SweepInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2ff753dddd9b028a, []int{21}
}
func (m *SweepInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SweepInfo.Unmarshal(m, b)
}
func (m *SweepInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SweepInfo.Marshal(b, m, deterministic)
}
func (dst *SweepInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SweepInfo.Merge(dst, src)
}
func (m *SweepInfo) XXX_Size() int {
	return xxx_messageInfo_SweepInfo.Size(m)
}
func (m *SweepInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SweepInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SweepInfo proto.InternalMessageInfo

func (m *SweepInfo) GetCoin() CoinType {
	if m != nil {
		return m.Coin
	}
	return CoinType_BITCOIN
}

func (m *SweepInfo) GetUtxos() []*Utxo {
	if m != nil {
		return m.Utxos
	}
	return nil
}

func (m *SweepInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *SweepInfo) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SweepInfo) GetRedeemScript() []byte {
	if m != nil {
		return m.RedeemScript
	}
	return nil
}

func (m *SweepInfo) GetFeeLevel() FeeLevel {
	if m != nil {
		return m.FeeLevel
	}
	return FeeLevel_ECONOMIC
}

type Input struct {
	Txid                 string   `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Index                uint32   `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Input) Reset()         { *m = Input{} }
func (m *Input) String() string { return proto.CompactTextString(m) }
func (*Input) ProtoMessage()    {}
func (*Input) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2ff753dddd9b028a, []int{22}
}
func (m *Input) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Input.Unmarshal(m, b)
}
func (m *Input) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Input.Marshal(b, m, deterministic)
}
func (dst *Input) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Input.Merge(dst, src)
}
func (m *Input) XXX_Size() int {
	return xxx_messageInfo_Input.Size(m)
}
func (m *Input) XXX_DiscardUnknown() {
	xxx_messageInfo_Input.DiscardUnknown(m)
}

var xxx_messageInfo_Input proto.InternalMessageInfo

func (m *Input) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (m *Input) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type Output struct {
	ScriptPubKey         []byte   `protobuf:"bytes,1,opt,name=scriptPubKey,proto3" json:"scriptPubKey,omitempty"`
	Value                uint64   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Output) Reset()         { *m = Output{} }
func (m *Output) String() string { return proto.CompactTextString(m) }
func (*Output) ProtoMessage()    {}
func (*Output) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2ff753dddd9b028a, []int{23}
}
func (m *Output) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Output.Unmarshal(m, b)
}
func (m *Output) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Output.Marshal(b, m, deterministic)
}
func (dst *Output) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Output.Merge(dst, src)
}
func (m *Output) XXX_Size() int {
	return xxx_messageInfo_Output.Size(m)
}
func (m *Output) XXX_DiscardUnknown() {
	xxx_messageInfo_Output.DiscardUnknown(m)
}

var xxx_messageInfo_Output proto.InternalMessageInfo

func (m *Output) GetScriptPubKey() []byte {
	if m != nil {
		return m.ScriptPubKey
	}
	return nil
}

func (m *Output) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Signature struct {
	Index                uint32   `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Signature            []byte   `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Signature) Reset()         { *m = Signature{} }
func (m *Signature) String() string { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()    {}
func (*Signature) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2ff753dddd9b028a, []int{24}
}
func (m *Signature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Signature.Unmarshal(m, b)
}
func (m *Signature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Signature.Marshal(b, m, deterministic)
}
func (dst *Signature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature.Merge(dst, src)
}
func (m *Signature) XXX_Size() int {
	return xxx_messageInfo_Signature.Size(m)
}
func (m *Signature) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature.DiscardUnknown(m)
}

var xxx_messageInfo_Signature proto.InternalMessageInfo

func (m *Signature) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Signature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type CreateMultisigInfo struct {
	Coin                 CoinType  `protobuf:"varint,1,opt,name=coin,proto3,enum=pb.CoinType" json:"coin,omitempty"`
	Inputs               []*Input  `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs              []*Output `protobuf:"bytes,3,rep,name=outputs,proto3" json:"outputs,omitempty"`
	Key                  string    `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	RedeemScript         []byte    `protobuf:"bytes,5,opt,name=redeemScript,proto3" json:"redeemScript,omitempty"`
	FeePerByte           uint64    `protobuf:"varint,6,opt,name=feePerByte,proto3" json:"feePerByte,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CreateMultisigInfo) Reset()         { *m = CreateMultisigInfo{} }
func (m *CreateMultisigInfo) String() string { return proto.CompactTextString(m) }
func (*CreateMultisigInfo) ProtoMessage()    {}
func (*CreateMultisigInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2ff753dddd9b028a, []int{25}
}
func (m *CreateMultisigInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateMultisigInfo.Unmarshal(m, b)
}
func (m *CreateMultisigInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateMultisigInfo.Marshal(b, m, deterministic)
}
func (dst *CreateMultisigInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMultisigInfo.Merge(dst, src)
}
func (m *CreateMultisigInfo) XXX_Size() int {
	return xxx_messageInfo_CreateMultisigInfo.Size(m)
}
func (m *CreateMultisigInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMultisigInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMultisigInfo proto.InternalMessageInfo

func (m *CreateMultisigInfo) GetCoin() CoinType {
	if m != nil {
		return m.Coin
	}
	return CoinType_BITCOIN
}

func (m *CreateMultisigInfo) GetInputs() []*Input {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *CreateMultisigInfo) GetOutputs() []*Output {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *CreateMultisigInfo) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CreateMultisigInfo) GetRedeemScript() []byte {
	if m != nil {
		return m.RedeemScript
	}
	return nil
}

func (m *CreateMultisigInfo) GetFeePerByte() uint64 {
	if m != nil {
		return m.FeePerByte
	}
	return 0
}

type SignatureList struct {
	Sigs                 []*Signature `protobuf:"bytes,1,rep,name=sigs,proto3" json:"sigs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SignatureList) Reset()         { *m = SignatureList{} }
func (m *SignatureList) String() string { return proto.CompactTextString(m) }
func (*SignatureList) ProtoMessage()    {}
func (*SignatureList) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2ff753dddd9b028a, []int{26}
}
func (m *SignatureList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignatureList.Unmarshal(m, b)
}
func (m *SignatureList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignatureList.Marshal(b, m, deterministic)
}
func (dst *SignatureList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignatureList.Merge(dst, src)
}
func (m *SignatureList) XXX_Size() int {
	return xxx_messageInfo_SignatureList.Size(m)
}
func (m *SignatureList) XXX_DiscardUnknown() {
	xxx_messageInfo_SignatureList.DiscardUnknown(m)
}

var xxx_messageInfo_SignatureList proto.InternalMessageInfo

func (m *SignatureList) GetSigs() []*Signature {
	if m != nil {
		return m.Sigs
	}
	return nil
}

type MultisignInfo struct {
	Coin                 CoinType     `protobuf:"varint,1,opt,name=coin,proto3,enum=pb.CoinType" json:"coin,omitempty"`
	Inputs               []*Input     `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs              []*Output    `protobuf:"bytes,3,rep,name=outputs,proto3" json:"outputs,omitempty"`
	Sig1                 []*Signature `protobuf:"bytes,4,rep,name=sig1,proto3" json:"sig1,omitempty"`
	Sig2                 []*Signature `protobuf:"bytes,5,rep,name=sig2,proto3" json:"sig2,omitempty"`
	RedeemScript         []byte       `protobuf:"bytes,6,opt,name=redeemScript,proto3" json:"redeemScript,omitempty"`
	FeePerByte           uint64       `protobuf:"varint,7,opt,name=feePerByte,proto3" json:"feePerByte,omitempty"`
	Broadcast            bool         `protobuf:"varint,8,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *MultisignInfo) Reset()         { *m = MultisignInfo{} }
func (m *MultisignInfo) String() string { return proto.CompactTextString(m) }
func (*MultisignInfo) ProtoMessage()    {}
func (*MultisignInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2ff753dddd9b028a, []int{27}
}
func (m *MultisignInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultisignInfo.Unmarshal(m, b)
}
func (m *MultisignInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultisignInfo.Marshal(b, m, deterministic)
}
func (dst *MultisignInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultisignInfo.Merge(dst, src)
}
func (m *MultisignInfo) XXX_Size() int {
	return xxx_messageInfo_MultisignInfo.Size(m)
}
func (m *MultisignInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MultisignInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MultisignInfo proto.InternalMessageInfo

func (m *MultisignInfo) GetCoin() CoinType {
	if m != nil {
		return m.Coin
	}
	return CoinType_BITCOIN
}

func (m *MultisignInfo) GetInputs() []*Input {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *MultisignInfo) GetOutputs() []*Output {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *MultisignInfo) GetSig1() []*Signature {
	if m != nil {
		return m.Sig1
	}
	return nil
}

func (m *MultisignInfo) GetSig2() []*Signature {
	if m != nil {
		return m.Sig2
	}
	return nil
}

func (m *MultisignInfo) GetRedeemScript() []byte {
	if m != nil {
		return m.RedeemScript
	}
	return nil
}

func (m *MultisignInfo) GetFeePerByte() uint64 {
	if m != nil {
		return m.FeePerByte
	}
	return 0
}

func (m *MultisignInfo) GetBroadcast() bool {
	if m != nil {
		return m.Broadcast
	}
	return false
}

type RawTx struct {
	Tx                   []byte   `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RawTx) Reset()         { *m = RawTx{} }
func (m *RawTx) String() string { return proto.CompactTextString(m) }
func (*RawTx) ProtoMessage()    {}
func (*RawTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2ff753dddd9b028a, []int{28}
}
func (m *RawTx) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RawTx.Unmarshal(m, b)
}
func (m *RawTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RawTx.Marshal(b, m, deterministic)
}
func (dst *RawTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawTx.Merge(dst, src)
}
func (m *RawTx) XXX_Size() int {
	return xxx_messageInfo_RawTx.Size(m)
}
func (m *RawTx) XXX_DiscardUnknown() {
	xxx_messageInfo_RawTx.DiscardUnknown(m)
}

var xxx_messageInfo_RawTx proto.InternalMessageInfo

func (m *RawTx) GetTx() []byte {
	if m != nil {
		return m.Tx
	}
	return nil
}

type EstimateFeeData struct {
	Coin                 CoinType  `protobuf:"varint,1,opt,name=coin,proto3,enum=pb.CoinType" json:"coin,omitempty"`
	Inputs               []*Input  `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs              []*Output `protobuf:"bytes,3,rep,name=outputs,proto3" json:"outputs,omitempty"`
	FeePerByte           uint64    `protobuf:"varint,4,opt,name=feePerByte,proto3" json:"feePerByte,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *EstimateFeeData) Reset()         { *m = EstimateFeeData{} }
func (m *EstimateFeeData) String() string { return proto.CompactTextString(m) }
func (*EstimateFeeData) ProtoMessage()    {}
func (*EstimateFeeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2ff753dddd9b028a, []int{29}
}
func (m *EstimateFeeData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EstimateFeeData.Unmarshal(m, b)
}
func (m *EstimateFeeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EstimateFeeData.Marshal(b, m, deterministic)
}
func (dst *EstimateFeeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateFeeData.Merge(dst, src)
}
func (m *EstimateFeeData) XXX_Size() int {
	return xxx_messageInfo_EstimateFeeData.Size(m)
}
func (m *EstimateFeeData) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateFeeData.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateFeeData proto.InternalMessageInfo

func (m *EstimateFeeData) GetCoin() CoinType {
	if m != nil {
		return m.Coin
	}
	return CoinType_BITCOIN
}

func (m *EstimateFeeData) GetInputs() []*Input {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *EstimateFeeData) GetOutputs() []*Output {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *EstimateFeeData) GetFeePerByte() uint64 {
	if m != nil {
		return m.FeePerByte
	}
	return 0
}

func init() {
	proto.RegisterType((*Empty)(nil), "pb.Empty")
	proto.RegisterType((*CoinSelection)(nil), "pb.CoinSelection")
	proto.RegisterType((*Row)(nil), "pb.Row")
	proto.RegisterType((*KeySelection)(nil), "pb.KeySelection")
	proto.RegisterType((*Address)(nil), "pb.Address")
	proto.RegisterType((*Height)(nil), "pb.Height")
	proto.RegisterType((*Balances)(nil), "pb.Balances")
	proto.RegisterType((*Key)(nil), "pb.Key")
	proto.RegisterType((*Keys)(nil), "pb.Keys")
	proto.RegisterType((*Addresses)(nil), "pb.Addresses")
	proto.RegisterType((*BoolResponse)(nil), "pb.BoolResponse")
	proto.RegisterType((*NetParams)(nil), "pb.NetParams")
	proto.RegisterType((*TransactionList)(nil), "pb.TransactionList")
	proto.RegisterType((*Tx)(nil), "pb.Tx")
	proto.RegisterType((*Txid)(nil), "pb.Txid")
	proto.RegisterType((*FeeLevelSelection)(nil), "pb.FeeLevelSelection")
	proto.RegisterType((*FeePerByte)(nil), "pb.FeePerByte")
	proto.RegisterType((*Fee)(nil), "pb.Fee")
	proto.RegisterType((*SpendInfo)(nil), "pb.SpendInfo")
	proto.RegisterType((*Confirmations)(nil), "pb.Confirmations")
	proto.RegisterType((*Utxo)(nil), "pb.Utxo")
	proto.RegisterType((*SweepInfo)(nil), "pb.SweepInfo")
	proto.RegisterType((*Input)(nil), "pb.Input")
	proto.RegisterType((*Output)(nil), "pb.Output")
	proto.RegisterType((*Signature)(nil), "pb.Signature")
	proto.RegisterType((*CreateMultisigInfo)(nil), "pb.CreateMultisigInfo")
	proto.RegisterType((*SignatureList)(nil), "pb.SignatureList")
	proto.RegisterType((*MultisignInfo)(nil), "pb.MultisignInfo")
	proto.RegisterType((*RawTx)(nil), "pb.RawTx")
	proto.RegisterType((*EstimateFeeData)(nil), "pb.EstimateFeeData")
	proto.RegisterEnum("pb.CoinType", CoinType_name, CoinType_value)
	proto.RegisterEnum("pb.KeyPurpose", KeyPurpose_name, KeyPurpose_value)
	proto.RegisterEnum("pb.FeeLevel", FeeLevel_name, FeeLevel_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type APIClient interface {
	Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	CurrentAddress(ctx context.Context, in *KeySelection, opts ...grpc.CallOption) (*Address, error)
	NewAddress(ctx context.Context, in *KeySelection, opts ...grpc.CallOption) (*Address, error)
	ChainTip(ctx context.Context, in *CoinSelection, opts ...grpc.CallOption) (*Height, error)
	Balance(ctx context.Context, in *CoinSelection, opts ...grpc.CallOption) (*Balances, error)
	MasterPrivateKey(ctx context.Context, in *CoinSelection, opts ...grpc.CallOption) (*Key, error)
	MasterPublicKey(ctx context.Context, in *CoinSelection, opts ...grpc.CallOption) (*Key, error)
	HasKey(ctx context.Context, in *Address, opts ...grpc.CallOption) (*BoolResponse, error)
	Params(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NetParams, error)
	Transactions(ctx context.Context, in *CoinSelection, opts ...grpc.CallOption) (*TransactionList, error)
	GetTransaction(ctx context.Context, in *Txid, opts ...grpc.CallOption) (*Tx, error)
	GetFeePerByte(ctx context.Context, in *FeeLevelSelection, opts ...grpc.CallOption) (*FeePerByte, error)
	Spend(ctx context.Context, in *SpendInfo, opts ...grpc.CallOption) (*Txid, error)
	BumpFee(ctx context.Context, in *Txid, opts ...grpc.CallOption) (*Txid, error)
	AddWatchedScript(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Empty, error)
	GetConfirmations(ctx context.Context, in *Txid, opts ...grpc.CallOption) (*Confirmations, error)
	SweepAddress(ctx context.Context, in *SweepInfo, opts ...grpc.CallOption) (*Txid, error)
	CreateMultisigSignature(ctx context.Context, in *CreateMultisigInfo, opts ...grpc.CallOption) (*SignatureList, error)
	Multisign(ctx context.Context, in *MultisignInfo, opts ...grpc.CallOption) (*RawTx, error)
	EstimateFee(ctx context.Context, in *EstimateFeeData, opts ...grpc.CallOption) (*Fee, error)
	GetKey(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Key, error)
	ListKeys(ctx context.Context, in *CoinSelection, opts ...grpc.CallOption) (*Keys, error)
	ListAddresses(ctx context.Context, in *CoinSelection, opts ...grpc.CallOption) (*Addresses, error)
	WalletNotify(ctx context.Context, in *CoinSelection, opts ...grpc.CallOption) (API_WalletNotifyClient, error)
	DumpTables(ctx context.Context, in *CoinSelection, opts ...grpc.CallOption) (API_DumpTablesClient, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.API/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CurrentAddress(ctx context.Context, in *KeySelection, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/pb.API/CurrentAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) NewAddress(ctx context.Context, in *KeySelection, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/pb.API/NewAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ChainTip(ctx context.Context, in *CoinSelection, opts ...grpc.CallOption) (*Height, error) {
	out := new(Height)
	err := c.cc.Invoke(ctx, "/pb.API/ChainTip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Balance(ctx context.Context, in *CoinSelection, opts ...grpc.CallOption) (*Balances, error) {
	out := new(Balances)
	err := c.cc.Invoke(ctx, "/pb.API/Balance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) MasterPrivateKey(ctx context.Context, in *CoinSelection, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := c.cc.Invoke(ctx, "/pb.API/MasterPrivateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) MasterPublicKey(ctx context.Context, in *CoinSelection, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := c.cc.Invoke(ctx, "/pb.API/MasterPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) HasKey(ctx context.Context, in *Address, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/pb.API/HasKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Params(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NetParams, error) {
	out := new(NetParams)
	err := c.cc.Invoke(ctx, "/pb.API/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Transactions(ctx context.Context, in *CoinSelection, opts ...grpc.CallOption) (*TransactionList, error) {
	out := new(TransactionList)
	err := c.cc.Invoke(ctx, "/pb.API/Transactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetTransaction(ctx context.Context, in *Txid, opts ...grpc.CallOption) (*Tx, error) {
	out := new(Tx)
	err := c.cc.Invoke(ctx, "/pb.API/GetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetFeePerByte(ctx context.Context, in *FeeLevelSelection, opts ...grpc.CallOption) (*FeePerByte, error) {
	out := new(FeePerByte)
	err := c.cc.Invoke(ctx, "/pb.API/GetFeePerByte", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Spend(ctx context.Context, in *SpendInfo, opts ...grpc.CallOption) (*Txid, error) {
	out := new(Txid)
	err := c.cc.Invoke(ctx, "/pb.API/Spend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) BumpFee(ctx context.Context, in *Txid, opts ...grpc.CallOption) (*Txid, error) {
	out := new(Txid)
	err := c.cc.Invoke(ctx, "/pb.API/BumpFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) AddWatchedScript(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.API/AddWatchedScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetConfirmations(ctx context.Context, in *Txid, opts ...grpc.CallOption) (*Confirmations, error) {
	out := new(Confirmations)
	err := c.cc.Invoke(ctx, "/pb.API/GetConfirmations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SweepAddress(ctx context.Context, in *SweepInfo, opts ...grpc.CallOption) (*Txid, error) {
	out := new(Txid)
	err := c.cc.Invoke(ctx, "/pb.API/SweepAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateMultisigSignature(ctx context.Context, in *CreateMultisigInfo, opts ...grpc.CallOption) (*SignatureList, error) {
	out := new(SignatureList)
	err := c.cc.Invoke(ctx, "/pb.API/CreateMultisigSignature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) Multisign(ctx context.Context, in *MultisignInfo, opts ...grpc.CallOption) (*RawTx, error) {
	out := new(RawTx)
	err := c.cc.Invoke(ctx, "/pb.API/Multisign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) EstimateFee(ctx context.Context, in *EstimateFeeData, opts ...grpc.CallOption) (*Fee, error) {
	out := new(Fee)
	err := c.cc.Invoke(ctx, "/pb.API/EstimateFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetKey(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := c.cc.Invoke(ctx, "/pb.API/GetKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListKeys(ctx context.Context, in *CoinSelection, opts ...grpc.CallOption) (*Keys, error) {
	out := new(Keys)
	err := c.cc.Invoke(ctx, "/pb.API/ListKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListAddresses(ctx context.Context, in *CoinSelection, opts ...grpc.CallOption) (*Addresses, error) {
	out := new(Addresses)
	err := c.cc.Invoke(ctx, "/pb.API/ListAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) WalletNotify(ctx context.Context, in *CoinSelection, opts ...grpc.CallOption) (API_WalletNotifyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_API_serviceDesc.Streams[0], "/pb.API/WalletNotify", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIWalletNotifyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_WalletNotifyClient interface {
	Recv() (*Tx, error)
	grpc.ClientStream
}

type aPIWalletNotifyClient struct {
	grpc.ClientStream
}

func (x *aPIWalletNotifyClient) Recv() (*Tx, error) {
	m := new(Tx)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) DumpTables(ctx context.Context, in *CoinSelection, opts ...grpc.CallOption) (API_DumpTablesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_API_serviceDesc.Streams[1], "/pb.API/DumpTables", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIDumpTablesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_DumpTablesClient interface {
	Recv() (*Row, error)
	grpc.ClientStream
}

type aPIDumpTablesClient struct {
	grpc.ClientStream
}

func (x *aPIDumpTablesClient) Recv() (*Row, error) {
	m := new(Row)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// APIServer is the server API for API service.
type APIServer interface {
	Stop(context.Context, *Empty) (*Empty, error)
	CurrentAddress(context.Context, *KeySelection) (*Address, error)
	NewAddress(context.Context, *KeySelection) (*Address, error)
	ChainTip(context.Context, *CoinSelection) (*Height, error)
	Balance(context.Context, *CoinSelection) (*Balances, error)
	MasterPrivateKey(context.Context, *CoinSelection) (*Key, error)
	MasterPublicKey(context.Context, *CoinSelection) (*Key, error)
	HasKey(context.Context, *Address) (*BoolResponse, error)
	Params(context.Context, *Empty) (*NetParams, error)
	Transactions(context.Context, *CoinSelection) (*TransactionList, error)
	GetTransaction(context.Context, *Txid) (*Tx, error)
	GetFeePerByte(context.Context, *FeeLevelSelection) (*FeePerByte, error)
	Spend(context.Context, *SpendInfo) (*Txid, error)
	BumpFee(context.Context, *Txid) (*Txid, error)
	AddWatchedScript(context.Context, *Address) (*Empty, error)
	GetConfirmations(context.Context, *Txid) (*Confirmations, error)
	SweepAddress(context.Context, *SweepInfo) (*Txid, error)
	CreateMultisigSignature(context.Context, *CreateMultisigInfo) (*SignatureList, error)
	Multisign(context.Context, *MultisignInfo) (*RawTx, error)
	EstimateFee(context.Context, *EstimateFeeData) (*Fee, error)
	GetKey(context.Context, *Address) (*Key, error)
	ListKeys(context.Context, *CoinSelection) (*Keys, error)
	ListAddresses(context.Context, *CoinSelection) (*Addresses, error)
	WalletNotify(*CoinSelection, API_WalletNotifyServer) error
	DumpTables(*CoinSelection, API_DumpTablesServer) error
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Stop(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CurrentAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeySelection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CurrentAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/CurrentAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CurrentAddress(ctx, req.(*KeySelection))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_NewAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeySelection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).NewAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/NewAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).NewAddress(ctx, req.(*KeySelection))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ChainTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinSelection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ChainTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/ChainTip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ChainTip(ctx, req.(*CoinSelection))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Balance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinSelection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Balance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/Balance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Balance(ctx, req.(*CoinSelection))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_MasterPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinSelection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).MasterPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/MasterPrivateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).MasterPrivateKey(ctx, req.(*CoinSelection))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_MasterPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinSelection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).MasterPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/MasterPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).MasterPublicKey(ctx, req.(*CoinSelection))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_HasKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).HasKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/HasKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).HasKey(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Params(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Transactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinSelection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Transactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/Transactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Transactions(ctx, req.(*CoinSelection))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Txid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetTransaction(ctx, req.(*Txid))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetFeePerByte_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeeLevelSelection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetFeePerByte(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/GetFeePerByte",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetFeePerByte(ctx, req.(*FeeLevelSelection))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Spend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpendInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Spend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/Spend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Spend(ctx, req.(*SpendInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_BumpFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Txid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).BumpFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/BumpFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).BumpFee(ctx, req.(*Txid))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_AddWatchedScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).AddWatchedScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/AddWatchedScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).AddWatchedScript(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetConfirmations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Txid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetConfirmations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/GetConfirmations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetConfirmations(ctx, req.(*Txid))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SweepAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SweepInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SweepAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/SweepAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SweepAddress(ctx, req.(*SweepInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateMultisigSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMultisigInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateMultisigSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/CreateMultisigSignature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateMultisigSignature(ctx, req.(*CreateMultisigInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_Multisign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultisignInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).Multisign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/Multisign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).Multisign(ctx, req.(*MultisignInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_EstimateFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateFeeData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).EstimateFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/EstimateFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).EstimateFee(ctx, req.(*EstimateFeeData))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/GetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetKey(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinSelection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/ListKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListKeys(ctx, req.(*CoinSelection))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinSelection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.API/ListAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListAddresses(ctx, req.(*CoinSelection))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_WalletNotify_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CoinSelection)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).WalletNotify(m, &aPIWalletNotifyServer{stream})
}

type API_WalletNotifyServer interface {
	Send(*Tx) error
	grpc.ServerStream
}

type aPIWalletNotifyServer struct {
	grpc.ServerStream
}

func (x *aPIWalletNotifyServer) Send(m *Tx) error {
	return x.ServerStream.SendMsg(m)
}

func _API_DumpTables_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CoinSelection)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).DumpTables(m, &aPIDumpTablesServer{stream})
}

type API_DumpTablesServer interface {
	Send(*Row) error
	grpc.ServerStream
}

type aPIDumpTablesServer struct {
	grpc.ServerStream
}

func (x *aPIDumpTablesServer) Send(m *Row) error {
	return x.ServerStream.SendMsg(m)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stop",
			Handler:    _API_Stop_Handler,
		},
		{
			MethodName: "CurrentAddress",
			Handler:    _API_CurrentAddress_Handler,
		},
		{
			MethodName: "NewAddress",
			Handler:    _API_NewAddress_Handler,
		},
		{
			MethodName: "ChainTip",
			Handler:    _API_ChainTip_Handler,
		},
		{
			MethodName: "Balance",
			Handler:    _API_Balance_Handler,
		},
		{
			MethodName: "MasterPrivateKey",
			Handler:    _API_MasterPrivateKey_Handler,
		},
		{
			MethodName: "MasterPublicKey",
			Handler:    _API_MasterPublicKey_Handler,
		},
		{
			MethodName: "HasKey",
			Handler:    _API_HasKey_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _API_Params_Handler,
		},
		{
			MethodName: "Transactions",
			Handler:    _API_Transactions_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _API_GetTransaction_Handler,
		},
		{
			MethodName: "GetFeePerByte",
			Handler:    _API_GetFeePerByte_Handler,
		},
		{
			MethodName: "Spend",
			Handler:    _API_Spend_Handler,
		},
		{
			MethodName: "BumpFee",
			Handler:    _API_BumpFee_Handler,
		},
		{
			MethodName: "AddWatchedScript",
			Handler:    _API_AddWatchedScript_Handler,
		},
		{
			MethodName: "GetConfirmations",
			Handler:    _API_GetConfirmations_Handler,
		},
		{
			MethodName: "SweepAddress",
			Handler:    _API_SweepAddress_Handler,
		},
		{
			MethodName: "CreateMultisigSignature",
			Handler:    _API_CreateMultisigSignature_Handler,
		},
		{
			MethodName: "Multisign",
			Handler:    _API_Multisign_Handler,
		},
		{
			MethodName: "EstimateFee",
			Handler:    _API_EstimateFee_Handler,
		},
		{
			MethodName: "GetKey",
			Handler:    _API_GetKey_Handler,
		},
		{
			MethodName: "ListKeys",
			Handler:    _API_ListKeys_Handler,
		},
		{
			MethodName: "ListAddresses",
			Handler:    _API_ListAddresses_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WalletNotify",
			Handler:       _API_WalletNotify_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DumpTables",
			Handler:       _API_DumpTables_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_api_2ff753dddd9b028a) }

var fileDescriptor_api_2ff753dddd9b028a = []byte{
	// 1449 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0xcd, 0x72, 0xdb, 0x46,
	0x12, 0xe6, 0x0f, 0xf8, 0x83, 0x16, 0x28, 0xd3, 0xb3, 0xbb, 0x36, 0x57, 0xeb, 0x92, 0xe9, 0x59,
	0x1f, 0x64, 0xad, 0x57, 0xb6, 0xe8, 0x4a, 0xca, 0x87, 0xa4, 0x5c, 0x12, 0xad, 0x1f, 0x46, 0x12,
	0xc5, 0x1a, 0xd1, 0xe5, 0xc4, 0x17, 0xd7, 0x90, 0x68, 0x49, 0x28, 0x93, 0x00, 0x0a, 0x18, 0x58,
	0xe4, 0x3d, 0x8f, 0x91, 0x5c, 0xf2, 0x04, 0x79, 0x8b, 0x3c, 0x41, 0xde, 0x27, 0x35, 0x83, 0x01,
	0x01, 0xc8, 0xb4, 0x2d, 0xe7, 0xe0, 0x5b, 0x4f, 0xf7, 0x87, 0x99, 0xee, 0xaf, 0x7b, 0x7a, 0x1a,
	0x60, 0x72, 0xdf, 0xd9, 0xf2, 0x03, 0x4f, 0x78, 0xa4, 0xe4, 0x8f, 0xd6, 0xee, 0x5f, 0x78, 0xde,
	0xc5, 0x04, 0x9f, 0x28, 0xcd, 0x28, 0x3a, 0x7f, 0x22, 0x9c, 0x29, 0x86, 0x82, 0x4f, 0xfd, 0x18,
	0x44, 0x6b, 0x50, 0xd9, 0x9b, 0xfa, 0x62, 0x4e, 0xb7, 0xa1, 0xd1, 0xf5, 0x1c, 0xf7, 0x0c, 0x27,
	0x38, 0x16, 0x8e, 0xe7, 0x92, 0x36, 0x18, 0x63, 0xcf, 0x71, 0x5b, 0xc5, 0x76, 0x71, 0x63, 0xb5,
	0x63, 0x6d, 0xf9, 0xa3, 0x2d, 0x09, 0x18, 0xce, 0x7d, 0x64, 0xca, 0x42, 0xff, 0x0d, 0x65, 0xe6,
	0x5d, 0x11, 0x02, 0x86, 0xcd, 0x05, 0x57, 0x40, 0x93, 0x29, 0x99, 0xbe, 0x01, 0xeb, 0x08, 0xe7,
	0x5f, 0xb0, 0x19, 0xd9, 0x80, 0x9a, 0x1f, 0x05, 0xbe, 0x17, 0x62, 0xab, 0xa4, 0x40, 0xab, 0x12,
	0x74, 0x84, 0xf3, 0x41, 0xac, 0x65, 0x89, 0x99, 0xbe, 0x80, 0xda, 0x8e, 0x6d, 0x07, 0x18, 0x86,
	0x37, 0xd8, 0x96, 0x80, 0xc1, 0x6d, 0x3b, 0x50, 0x7b, 0x9a, 0x4c, 0xc9, 0xb4, 0x0d, 0xd5, 0x43,
	0x74, 0x2e, 0x2e, 0x05, 0xb9, 0x03, 0xd5, 0x4b, 0x25, 0xa9, 0x1d, 0x1a, 0x4c, 0xaf, 0xe8, 0x0f,
	0x50, 0xdf, 0xe5, 0x13, 0xee, 0x8e, 0x31, 0x24, 0xf7, 0xc0, 0x1c, 0x7b, 0xee, 0xb9, 0x13, 0x4c,
	0xd1, 0x56, 0x30, 0x83, 0xa5, 0x0a, 0xd2, 0x86, 0x95, 0xc8, 0x4d, 0xed, 0x25, 0x65, 0xcf, 0xaa,
	0xe8, 0x5d, 0x28, 0x1f, 0xe1, 0x9c, 0x34, 0xa1, 0xfc, 0x0e, 0xe7, 0x9a, 0x24, 0x29, 0xd2, 0xff,
	0x82, 0x71, 0x84, 0xf3, 0x90, 0xfc, 0x07, 0x8c, 0x77, 0x38, 0x0f, 0x5b, 0xc5, 0x76, 0x79, 0x63,
	0xa5, 0x53, 0xd3, 0x61, 0x33, 0xa5, 0xa4, 0xdf, 0x82, 0xa9, 0x83, 0xc5, 0x90, 0x3c, 0x02, 0x93,
	0x27, 0x0b, 0x0d, 0x5f, 0x91, 0x70, 0x8d, 0x60, 0xa9, 0x95, 0x52, 0xb0, 0x76, 0x3d, 0x6f, 0xc2,
	0x30, 0xf4, 0x3d, 0x37, 0x44, 0xc9, 0xc3, 0xc8, 0xf3, 0x26, 0xea, 0xfc, 0x3a, 0x53, 0x32, 0xbd,
	0x0f, 0x66, 0x1f, 0xc5, 0x80, 0x07, 0x7c, 0x1a, 0x4a, 0x80, 0xcb, 0xa7, 0x98, 0x64, 0x51, 0xca,
	0xf4, 0x7b, 0xb8, 0x35, 0x0c, 0xb8, 0x1b, 0x72, 0x95, 0xc4, 0x63, 0x27, 0x14, 0x64, 0x13, 0x2c,
	0x91, 0xaa, 0x12, 0x2f, 0xaa, 0xd2, 0x8b, 0xe1, 0x8c, 0xe5, 0x6c, 0xf4, 0xf7, 0x22, 0x94, 0x86,
	0x33, 0xb9, 0xb3, 0x98, 0x39, 0x76, 0xb2, 0xb3, 0x94, 0xc9, 0x3f, 0xa1, 0xf2, 0x9e, 0x4f, 0xa2,
	0x38, 0xd7, 0x65, 0x16, 0x2f, 0x32, 0xe9, 0x28, 0xb7, 0x8b, 0x1b, 0x95, 0x24, 0x1d, 0xe4, 0x39,
	0x98, 0x8b, 0xba, 0x6d, 0x19, 0xed, 0xe2, 0xc6, 0x4a, 0x67, 0x6d, 0x2b, 0xae, 0xec, 0xad, 0xa4,
	0xb2, 0xb7, 0x86, 0x09, 0x82, 0xa5, 0x60, 0x99, 0xbc, 0x2b, 0x2e, 0xc6, 0x97, 0xa7, 0xee, 0x64,
	0xde, 0xaa, 0xa8, 0xd8, 0x53, 0x85, 0xcc, 0x49, 0xc0, 0xaf, 0x5a, 0xd5, 0x76, 0x71, 0xc3, 0x62,
	0x52, 0xa4, 0xdf, 0x81, 0x31, 0x94, 0xfe, 0xdd, 0xa8, 0xb0, 0x2e, 0x79, 0x78, 0x99, 0x14, 0x96,
	0x94, 0xe9, 0x5b, 0xb8, 0xbd, 0x8f, 0x78, 0x8c, 0xef, 0x71, 0xf2, 0x65, 0xa5, 0x5f, 0x3f, 0xd7,
	0x9f, 0xe9, 0xda, 0x57, 0xa8, 0x64, 0x2b, 0xb6, 0xb0, 0xd2, 0x75, 0x80, 0x7d, 0xc4, 0x01, 0x06,
	0xbb, 0x73, 0x81, 0xd2, 0xfd, 0x73, 0x44, 0x5d, 0x93, 0x52, 0x94, 0xb5, 0xb6, 0x8f, 0xcb, 0x0c,
	0xbf, 0x16, 0xc1, 0x3c, 0xf3, 0xd1, 0xb5, 0x7b, 0xee, 0xb9, 0x77, 0x03, 0x97, 0x5a, 0x50, 0xd3,
	0xb5, 0xa4, 0x03, 0x4c, 0x96, 0x32, 0x47, 0x7c, 0xea, 0x45, 0x6e, 0x9c, 0x23, 0x83, 0xe9, 0x55,
	0x2e, 0x08, 0xe3, 0x53, 0x41, 0x48, 0xe6, 0xa6, 0x38, 0xf5, 0x54, 0x3a, 0x4c, 0xa6, 0x64, 0xfa,
	0x8d, 0xec, 0x3e, 0xea, 0xc6, 0x70, 0x55, 0x3b, 0xe4, 0x21, 0x34, 0xc6, 0x59, 0x85, 0xbe, 0xa0,
	0x79, 0x25, 0xdd, 0x07, 0xe3, 0x95, 0x98, 0x79, 0x1f, 0x2b, 0x31, 0xc7, 0xb5, 0x71, 0xa6, 0x02,
	0x68, 0xb0, 0x78, 0x91, 0x16, 0x5e, 0xec, 0x7d, 0xbc, 0xa0, 0x7f, 0x48, 0x7a, 0xae, 0x10, 0xfd,
	0x1b, 0xd2, 0xb3, 0x0e, 0x95, 0x48, 0xcc, 0x3c, 0x49, 0x8e, 0x2c, 0xff, 0xba, 0x84, 0x48, 0x47,
	0x58, 0xac, 0xce, 0xd2, 0x57, 0xce, 0xd3, 0xa7, 0xdb, 0x80, 0xb1, 0x68, 0x03, 0x84, 0x82, 0x15,
	0xa0, 0x8d, 0x38, 0x3d, 0x1b, 0x07, 0x8e, 0x2f, 0x14, 0x2d, 0x16, 0xcb, 0xe9, 0x72, 0xe4, 0x56,
	0x3f, 0x59, 0x21, 0xdb, 0x50, 0xe9, 0xb9, 0x7e, 0x24, 0x6e, 0x4e, 0x09, 0xdd, 0x85, 0xea, 0x69,
	0x24, 0xe4, 0x37, 0x14, 0xac, 0x50, 0x1d, 0x38, 0x88, 0x46, 0x47, 0xba, 0x59, 0x59, 0x2c, 0xa7,
	0xcb, 0xdf, 0xdc, 0x05, 0x81, 0x2f, 0xc0, 0x3c, 0x73, 0x2e, 0x5c, 0x2e, 0xa2, 0x00, 0xd3, 0x63,
	0x8a, 0x59, 0xe6, 0xef, 0x81, 0x19, 0x26, 0x10, 0xf5, 0xb1, 0xc5, 0x52, 0x05, 0xfd, 0xb3, 0x08,
	0xa4, 0x1b, 0x20, 0x17, 0x78, 0x12, 0x4d, 0x84, 0x13, 0x3a, 0x17, 0x37, 0x4c, 0xc5, 0x03, 0xa8,
	0x3a, 0x32, 0xe0, 0x24, 0x17, 0xa6, 0xc4, 0x28, 0x0a, 0x98, 0x36, 0x90, 0x87, 0x50, 0xf3, 0x54,
	0x80, 0x32, 0x1b, 0x12, 0x03, 0x12, 0x13, 0xc7, 0xcc, 0x12, 0xd3, 0xdf, 0xcc, 0xcc, 0x3a, 0xc0,
	0xf9, 0xe2, 0x46, 0xaa, 0xdc, 0x18, 0x2c, 0xa3, 0xa1, 0x1d, 0x68, 0x2c, 0x88, 0x51, 0x0d, 0xf4,
	0x01, 0x18, 0xa1, 0x73, 0x91, 0x34, 0xce, 0x86, 0xf4, 0x64, 0x01, 0x60, 0xca, 0x44, 0x7f, 0x2b,
	0x41, 0x23, 0x61, 0xc1, 0xfd, 0xda, 0x34, 0xc4, 0xfe, 0x6d, 0xb7, 0x8c, 0x8f, 0xf9, 0xb7, 0xad,
	0x21, 0x9d, 0x56, 0xe5, 0x63, 0x90, 0xce, 0x07, 0xd4, 0x55, 0x3f, 0x4b, 0x5d, 0xed, 0x3a, 0x75,
	0xb2, 0x60, 0x46, 0x81, 0xc7, 0xed, 0x31, 0x0f, 0x45, 0xab, 0x1e, 0xf7, 0xee, 0x85, 0x82, 0xde,
	0x85, 0x0a, 0xe3, 0x57, 0xc3, 0x19, 0x59, 0x85, 0x92, 0x98, 0xe9, 0x52, 0x2d, 0x89, 0x19, 0xfd,
	0xa5, 0x08, 0xb7, 0xf6, 0x42, 0xe1, 0x4c, 0xb9, 0xc0, 0x7d, 0xc4, 0x97, 0x5c, 0xf0, 0xaf, 0xc9,
	0x5f, 0x3e, 0x2a, 0xe3, 0x7a, 0x54, 0x9b, 0x03, 0xa8, 0x27, 0x47, 0x93, 0x15, 0xa8, 0xed, 0xf6,
	0x86, 0xdd, 0xd3, 0x5e, 0xbf, 0x59, 0x20, 0x4d, 0xb0, 0xf4, 0xe2, 0x6d, 0x77, 0xe7, 0xec, 0xb0,
	0x59, 0x24, 0x26, 0x54, 0xde, 0x28, 0xb1, 0x44, 0x2c, 0xa8, 0x1f, 0xf7, 0x86, 0x7b, 0x0a, 0x5a,
	0x96, 0xab, 0xbd, 0xe1, 0xe1, 0x1e, 0xdb, 0x7b, 0x75, 0xd2, 0x34, 0x36, 0x37, 0x00, 0xd2, 0x31,
	0x49, 0xda, 0x7a, 0xfd, 0xe1, 0x1e, 0xeb, 0xef, 0x1c, 0x37, 0x0b, 0x0a, 0xf9, 0xa3, 0x5e, 0x15,
	0x37, 0x3b, 0x50, 0x4f, 0x5a, 0x86, 0xb2, 0x74, 0x4f, 0xfb, 0xa7, 0x27, 0xbd, 0x6e, 0xb3, 0x40,
	0x00, 0xaa, 0xfd, 0x53, 0x76, 0x22, 0x51, 0xd2, 0x32, 0x60, 0xbd, 0x53, 0xd6, 0x1b, 0xfe, 0xd4,
	0x2c, 0x75, 0x7e, 0x36, 0xa1, 0xbc, 0x33, 0xe8, 0x91, 0x75, 0x30, 0xce, 0x84, 0xe7, 0x13, 0x45,
	0x8c, 0x1a, 0x19, 0xd7, 0x52, 0x91, 0x16, 0xc8, 0x36, 0xac, 0x76, 0xa3, 0x20, 0x40, 0x57, 0x24,
	0xc3, 0x59, 0x53, 0x4f, 0x32, 0x8b, 0xa7, 0x70, 0x2d, 0x3b, 0xac, 0xd0, 0x02, 0xf9, 0x3f, 0x40,
	0x1f, 0xaf, 0x6e, 0x0c, 0xff, 0x1f, 0xd4, 0xbb, 0x97, 0xdc, 0x71, 0x87, 0x8e, 0x4f, 0x6e, 0x27,
	0x29, 0x4c, 0xd1, 0x2a, 0x1b, 0xf1, 0x5c, 0x47, 0x0b, 0xe4, 0x31, 0xd4, 0xf4, 0x04, 0xb7, 0x0c,
	0xab, 0x2a, 0x20, 0x99, 0xf0, 0x68, 0x81, 0x3c, 0x85, 0xe6, 0x09, 0x0f, 0x05, 0x06, 0x83, 0xc0,
	0x79, 0xcf, 0x05, 0xca, 0x46, 0xb7, 0xe4, 0xb3, 0x64, 0x36, 0xa3, 0x05, 0xf2, 0x04, 0x6e, 0xe9,
	0x2f, 0xa2, 0xd1, 0xc4, 0x19, 0x7f, 0xfe, 0x83, 0x47, 0x50, 0x3d, 0xe4, 0xa1, 0xc4, 0x65, 0xc3,
	0x5a, 0x53, 0x51, 0x67, 0x27, 0x35, 0x5a, 0x20, 0x0f, 0xa1, 0xaa, 0x87, 0xb2, 0x0c, 0xd9, 0xea,
	0x9a, 0x2d, 0xc6, 0x35, 0x5a, 0x20, 0xcf, 0xc1, 0xca, 0x0c, 0x67, 0xe1, 0xb2, 0xe3, 0xff, 0xa1,
	0xc6, 0xb2, 0xfc, 0x04, 0xa7, 0xf6, 0x5f, 0x3d, 0x40, 0x91, 0xd1, 0x93, 0x7a, 0x3c, 0xbf, 0x39,
	0xf6, 0x9a, 0x9e, 0xe4, 0xd4, 0xfe, 0x8d, 0x03, 0x14, 0x99, 0x71, 0xe3, 0x5f, 0xd9, 0x27, 0x27,
	0x3d, 0x64, 0x55, 0xab, 0x93, 0x8e, 0x57, 0x20, 0x14, 0x2a, 0x6a, 0xd6, 0x20, 0x71, 0x6b, 0x48,
	0xc6, 0x8e, 0xb5, 0xc5, 0x29, 0xb4, 0x40, 0xee, 0x43, 0x6d, 0x37, 0x9a, 0xfa, 0x72, 0x5a, 0x49,
	0x0f, 0xcf, 0x02, 0x1e, 0x43, 0x73, 0xc7, 0xb6, 0x5f, 0xcb, 0x59, 0x0d, 0x6d, 0xdd, 0x31, 0x72,
	0xcc, 0x5d, 0xab, 0xbe, 0xe6, 0x01, 0x8a, 0xfc, 0x08, 0x91, 0xee, 0xab, 0xa9, 0xc9, 0x4e, 0x0e,
	0x32, 0x21, 0x96, 0x7a, 0xf2, 0x93, 0xfa, 0x8b, 0x9d, 0x4d, 0x86, 0x80, 0x9c, 0x2f, 0xfb, 0x70,
	0x37, 0xff, 0x36, 0xa5, 0x6f, 0xdd, 0x1d, 0xb5, 0xf5, 0x07, 0x0f, 0x57, 0x7c, 0x64, 0xae, 0xf3,
	0xab, 0x0a, 0x36, 0x17, 0x7d, 0x3d, 0xce, 0x57, 0xae, 0xcd, 0xc7, 0x21, 0xa9, 0xae, 0xa6, 0x6e,
	0xc7, 0x4a, 0xa6, 0x8d, 0x11, 0x95, 0xcb, 0x6b, 0x7d, 0x2d, 0xae, 0xaf, 0x7d, 0x94, 0xa4, 0xb7,
	0xa1, 0x7a, 0x80, 0xe2, 0x83, 0xfa, 0xca, 0x55, 0x60, 0x5d, 0xfa, 0xa1, 0xfe, 0x39, 0x96, 0x14,
	0x4b, 0x5d, 0x23, 0x25, 0x37, 0xcf, 0xa0, 0x21, 0xa1, 0xe9, 0x9f, 0xc7, 0x12, 0x7c, 0x23, 0x73,
	0x0c, 0xc6, 0xd7, 0xd9, 0x7a, 0xcd, 0x27, 0x13, 0x14, 0x7d, 0x4f, 0x38, 0xe7, 0x4b, 0xef, 0xc3,
	0xa2, 0xba, 0x9e, 0x16, 0xc9, 0x63, 0x80, 0x97, 0xd1, 0xd4, 0x1f, 0xf2, 0xd1, 0x64, 0xf9, 0x01,
	0xca, 0x75, 0xe6, 0x5d, 0x49, 0xf4, 0xa8, 0xaa, 0xe6, 0xfc, 0x67, 0x7f, 0x05, 0x00, 0x00, 0xff,
	0xff, 0x87, 0x69, 0x86, 0xca, 0xe0, 0x0e, 0x00, 0x00,
}
