package net

import (
	"crypto/rsa"
	"encoding/hex"
	libp2p "gx/ipfs/QmaPbCnUMBohSGo3KnxEa2bHqyJVVeEEcwtqJAYxerieBo/go-libp2p-crypto"
	"testing"
)

func TestEncryptRSA(t *testing.T) {
	priv, pub, err := libp2p.GenerateKeyPair(libp2p.RSA, 4096)
	if err != nil {
		t.Error(err)
	}

	plaintext := "Hello World!!!"
	ciphertext, err := Encrypt(pub, []byte(plaintext))
	if err != nil {
		t.Error(err)
		return
	}
	decryptedPlaintext, err := Decrypt(priv, ciphertext)
	if err != nil {
		t.Error(err)
		return
	}
	if string(decryptedPlaintext) != plaintext {
		t.Error("Result plaintext doesn't match original plaintext")
	}
}

func TestEncryptCurve25519(t *testing.T) {
	priv, pub, err := libp2p.GenerateKeyPair(libp2p.Ed25519, 0)
	if err != nil {
		t.Error(err)
	}

	plaintext := "Hello World!!!"
	ciphertext, err := Encrypt(pub, []byte(plaintext))
	if err != nil {
		t.Error(err)
		return
	}
	decryptedPlaintext, err := Decrypt(priv, ciphertext)
	if err != nil {
		t.Error(err)
		return
	}
	if string(decryptedPlaintext) != plaintext {
		t.Error("Result plaintext doesn't match original plaintext")
	}
}

// nolint lll
func TestDecryptRSA(t *testing.T) {
	privKeyHex := "080012ad12308209290201000282020100d637bd9fc9e79a9ff4a0ce2a4bcfbd089e22def49d0f23344c9ab0d36dcb298ffd1b1ed29ea46d403d557f2ae81b7059049086ab978a386be2ea2f84dd5cc8e012df33e30d0c8574e325fedb7aca3778d6ec8dba4a80e664a426145f438bc70cea56f8461fa63748b15c94815308f2ce709918673adf3f3e9355589c9e6f0d20d7df2c79db20fb3d6d44b77b5cd04a4e9e8ca1fc15974919c844eca5e0430ccd6230ee77712f8874c41c5e348f06adbf4d0e2d4014bb6e90bcf0e6a46cb1f7f3ba5d925a7de762819530e90a6f27eee89412fc8f78f1290418fa854d7dabce6e43064724a899124bed1ade51a02011faf606fed688f312a281476133a1d27405143602861e03f1e3f70b7e7621764b2f97b032b6bd2aeece4595081d790379da8ff3c00c670670aaa20579c2d59408f297e9609f2bcc5d989e5041c17104e6d0916141f6f7dad8194eb54b7b761cdd3685fcb495847d1489e0cb0509c4b02801fa018de046fc424a56932b2ead5bee2c35f8da22a837046bcc7908963ddc92663d499d307707d85f43d58371b224881bce5f8f268f04be124a255556c09d7ac9461a265d290f44cd6e15a3124ce0d7c14531b04cdd2dfdde59ed2cd260bc5902d1a4243e069191a587fb88376321e7ed612d056ab6a4f9d4e0ba1f150e28df8878011cbaedefdece6d0a8b22cfbe15f748ee0ddc7e718067d843d8b7284178030203010001028202005141657925e1e722036db7a60d89a7ff8bd45853dafb71f415969bba272c680089166f739edf69dd73266a0d416b9f0af5134931ef526ba268b941fb18e867fdaecae1689f7b7f67ddfd7c958e1704419eecadb9db26d7bd971226aa17f9fe2fe4f7c646fb1c565e0980bf87ea923b5f9910495466dd65a4fbc7e4cbcbc0fdeed6537e105ed13cdb890606bf116ea4b0fbad0688933c066b742ec8c106b7083523a8c1dba6a04c1756881827c194dbf4f36a8c398163b345cd956737394fac68d3e9486970d682e3fa4e4a273e109cabb5f719bbe6393bc0a524e9c98200d855b4b0bdeda6d2214191979e7ac1cd4864b44be5004584462e43f16a6a665868cf0e7cbc2afd21c0d6424b23e29296891d4e5b95e38c93e33ec2edc93c71dca5eb5e742eecd4c666ce9709ac4a8e1ec986976f1be4a69e0c66971ae2f8936af1c5e092cb25596e796aefda423a180fc6d38387c4a9f7c47854f7d126fcfbb8900bbd0aa3c5e9b0aba684f5082bd851bcb08a47a2061b3c5713b9d90de77d9d68fa40e20c426f4c1ec6a0d06cd92a9dfd002439d4647fee278e3f17756958cc04e0188d8912494f8ea441266f1a743f50889162eac26536ea5a805adec033eae7148a089cc4c09225035bfa90068e3e89941a13989246c89dad13c7a8bb6a7bccddfdff18e8627aff4aaf7aa925220b524b4afbc70a9e06265aa376adc5ad0e33910282010100de4b247530d5bf488b1cf3a7fbd9f0d5c5fd2965fe31b0d729391f285eabb243ce0431c4bf982fadbc0bd043cd1c624b5085a6d0426004465d2ccb9d082a675df62d852eaa735c6bffab1afaaa0fd07558624bbfa4cdc93eda152fd8c99c43f1aefee0d4cad45297db891cb7306f7b4c689709a8eef92c138e86f2997600c84aedbf16c507551d991ab5b6488518bf695292321af226b552335c1741e8e8518befd384f797a6309e560d64cb4b2cb2881776fe1790aab0d6295a4cb5d48cce329602e27aa7e5d43e1e2b7b176f27f5bafe4e133fe17b73be34c7de2ddf089aa4d445561035ec90961fe7baab6c4c89ba6c2c27e1d3095e47899cc7740c0e251b0282010100f6b31dffdc06c9892180e2eb297b51db4820df88e2e62bfd0a6a0443fc35b1fbbc987ded2856f41f8304ad7aaedc39c73953514e4894a2837416a9028e481bd0c9f81562b9f7ea4e1704276aa4970e39679172bc0ff527bff83d806fcd53f7caaab2429923ff9860b7c8304c1639a49f1443124b0f71356da9aa747a1d010d58a866706b022436b429efedd9e583933fb2e853e856a897a9b9a73e4cb7c500bf115d6c89dd642d6d2ee308a0220820e63d1c101f9c83f6e501133d6bf3002bcc7bb69b5a4b847a415a096ea0367d9e820e43d46053d9ad9316a078a00d929ae6a342451caf04cd15d360d2ac1a358ed8dd779e37d4459edbd650f6767fd5ef3902820101009f1b31911fcf1e06926bba8a75dd5c5fe64279ab22f1f61d4ac833e0f541f76a48beffd04f42627dfba688febe849e6641d027c1d080610eec09f00309a1303334cd08128ab5df64fdae3eb5439be61cd792239d9c1c1efaf9a54885e6680ec9a1f394813a5c1671d314a49509fa014a8361f7ec0e8012683d0fa1fced554a07377c1a9413d77c43e5b6422e4df594ab920a4a0ab75fb5508caa518b3f656958bbe3adbc79b2de01b69e0792eacfa749796216244fcb9c9eed2250dda4b0d3b5a9618f3133937102b51d721127e27623cd799c95909288199035ae752eba3dd5d4897c3c461c78b0bb4d6572e525333f57c5931633b2f4e4473f0c13a7bd4819028201001de83f05ca9dc406ecd9dc289821cc1da253e1e58d644c06e421501d11d14c9f7110a78b7dad74f0f1083b23b9591764108e0a384c5240956118722ace26edc0550bcf43e5b9a95d082b47c004ee0f1a6474dc8cf1fe4d70575ed55838732a821649800b62b2d4bd3cea76f872655090bc7b1917a26a9e088a5e10bad1135493dfee734875bd0028bd40c9fbf5780afcd8ea9369823ff40aee67d904a1eeaf157abc71b110f6d90ef8752b91862ea81661682a883a884101282d35f005488b06c224b416b13b013b34f819c23078f023622954f0cc99821267d6d268ccdc6e0cf1d3d1df1554a6ac33b0f4394b001d2e2b431a1a3890ac1e888fce21358430f90282010100cc4dfb3e1c2cba82c99cc1e28047db2fa8aa5885b62c897a56b23c7801077df711f1522e4a18ece9679da57534d031cc37383c09d07b18f8edf6692a65d540438e348a543595f757b0ad4cf3fab7ff2d25e30256882ce2e19ab19f57f8a9f9187122e955134e9ba45b2c5d8776f54c8fd43115dc98f838c9d4c9fdd2fab453ced23d574e0959e7713c71766892f2bd79787b0415c70f45b260748cd52d3488f3c7c4c943781426c7bc95b0bf29339ef6f848976276d05529eee9838098398695f028152caa52e83b16edd6c082af635587ef75c5d95115efbf1657309f4ca0a7ecf70c6386fe980e1a3db3e0ca2de888b474c465b94d5b8f38409a04a38808a1"
	ciphertextHex := "00000001b7f70c6921501ac75379ce0d99630e03b48d4d9a0c2298c5c02ff994c5b865bd10f7d4ab1aa2ff340ed837c3697f83a575d586a0fa48ea84cd8076bf11be5fd3d19d0e339a0b876b943acfe3bb3406888d2a2c510526dad6409fbacb8e29b9a34431941bfb29db00795ef3b26b9a0d00e92342181ac8236efba72e989c5aacbef7db1872b9b900e5144eb3528183bdebbb62fdbcc64ec132550f5184b7596d94cbfb24edae59b465ff101e91b4256f1da5529b161846597afa6eeb0d1747da10f24aa367e1913997113689f4d2758980c3d1674ec8b4ba9f3b084b382a7870789d8f1411d7fc41a86ef02481fa48c8f9b1a1b81022ece9a7f76884510a3502133a30b02b4f72329e4cb6bc97ac60d3c253757f5d5c541daf874f1789b0e22e7250fa1040e6f10cee66fa95073cd08953a2600b13f5046ba406b1d143760e861428235d37e0637416c7e0160dd6b830e19d2004ec39d2900b1d5bd1d0c0bb2c5b48e2200437fdb2d6f709296914d39f9f31a68007c27ee123843f08b751289247d7d65a0aa98218b708221518c74e6bc1386389dd345785abe72697fe1b89447e254113112aaee9353432007f0e3bb987b28bb56d2c3e92f9fc088d01147396a36317c1388e712571d5f7271f32b5aa94cc55d75dd5fc791c5dc4e5a2ba51817b27c1ef73441242d33b4670343ad2850e8b373536b4e9846eb51a8ca7ccaff9286b92f75c1c79c6872b995ea5e3ebd72df9169b486532aae16472edc571841667edf519ade6b87fbbd5ffe4811d8e0b48b4c1601a62c4052537869295f557"
	privKeyBytes, err := hex.DecodeString(privKeyHex)
	if err != nil {
		t.Error(err)
		return
	}
	privKey, err := libp2p.UnmarshalPrivateKey(privKeyBytes)
	if err != nil {
		t.Error(err)
		return
	}

	cipherTextBytes, err := hex.DecodeString(ciphertextHex)
	if err != nil {
		t.Error(err)
		return
	}
	plaintext, err := Decrypt(privKey, cipherTextBytes)
	if err != nil {
		t.Error(err)
		return
	}
	if "Hello World!!!" != string(plaintext) {
		t.Error("Result plaintext doesn't match original plaintext")
		return
	}

	ciphertextInvalidHmacHex := "00000001b7f70c6921501ac75379ce0d99630e03b48d4d9a0c2298c5c02ff994c5b865bd10f7d4ab1aa2ff340ed837c3697f83a575d586a0fa48ea84cd8076bf11be5fd3d19d0e339a0b876b943acfe3bb3406888d2a2c510526dad6409fbacb8e29b9a34431941bfb29db00795ef3b26b9a0d00e92342181ac8236efba72e989c5aacbef7db1872b9b900e5144eb3528183bdebbb62fdbcc64ec132550f5184b7596d94cbfb24edae59b465ff101e91b4256f1da5529b161846597afa6eeb0d1747da10f24aa367e1913997113689f4d2758980c3d1674ec8b4ba9f3b084b382a7870789d8f1411d7fc41a86ef02481fa48c8f9b1a1b81022ece9a7f76884510a3502133a30b02b4f72329e4cb6bc97ac60d3c253757f5d5c541daf874f1789b0e22e7250fa1040e6f10cee66fa95073cd08953a2600b13f5046ba406b1d143760e861428235d37e0637416c7e0160dd6b830e19d2004ec39d2900b1d5bd1d0c0bb2c5b48e2200437fdb2d6f709296914d39f9f31a68007c27ee123843f08b751289247d7d65a0aa98218b708221518c74e6bc1386389dd345785abe72697fe1b89447e254113112aaee9353432007f0e3bb987b28bb56d2c3e92f9fc088d01147396a36317c1388e712571d5f7271f32b5aa94cc55d75dd5fc791c5dc4e5a2ba51817b27c1ef73441242d33b4670343ad2850e8b373536b4e9846eb51a8ca7ccaff9286b92f75c1c79c6872b995ea5e3ebd72df9169b486532aae16472edc571841667edf519ade6b87fbbd5ffe4811d8e0b48b4c1601a62c4052537869295f554"
	cipherTextInvalidHmacBytes, err := hex.DecodeString(ciphertextInvalidHmacHex)
	if err != nil {
		t.Error(err)
		return
	}
	_, err = Decrypt(privKey, cipherTextInvalidHmacBytes)
	if err != ErrInvalidHmac {
		t.Error("Failed to catch invalid hmac")
		return
	}
	ciphertextShortHex := "00000001b7f70c6921501ac75379ce0d99630e03b48d4d9a0c2298c5c02ff994c5b865bd10f7d4ab1aa2ff340ed837c3697f83a575d586a0fa48ea84cd8076bf11be5fd3d19d0e339a0b876b943acfe3bb3406888d2a2c510526dad6409fbacb8e29b9a34431941bfb29db00795ef3b26b9a0d00e92342181ac8236efba72e989c5aacbef7db1872b9b900e5144eb3528183bdebbb62fdbcc64ec132550f5184b7596d94cbfb24edae59b465ff101e91b4256f1da5529b161846597afa6eeb0d1747da10f24aa367e1913997113689f4d2758980c3d1674ec8b4ba9f3b084b382a7870789d8f1411d7fc41a86ef02481fa48c8f9b1a1b81022ece9a7f76884510a3502133a30b02b4f72329e4cb6bc97ac60d3c253757f5d5c541daf874f1789b0e22e7250fa1040e6f10cee66fa95073cd08953a2600b13f5046ba406b1d143760e861428235d37e0637416c7e0160dd6b830e19d2004ec39d2900b1d5bd1d0c0bb2c5b48e2200437fdb2d6f709296914d39f9f31a68007c27ee123843f08b751289247d7d65a0aa98218b708221518c74e6bc1386389dd345785abe72697fe1b89447e254113112aaee9353432007f0e3bb987b28bb56d2c3e92f9fc088d01147396a36317c1388e712571d5f7271f32b5aa94cc55d75dd5fc791c5dc4e5a2ba51817b27c1ef73441242d33b4670343ad2850e8b373536b4e9846eb51a8ca7ccaff9286b92f75c1c79c6872b995ea5e3ebd72df9169b486532aae16472edc571841667edf519ade6b87fbbd5ffe4811d8e0b"
	cipherTextShortBytes, err := hex.DecodeString(ciphertextShortHex)
	if err != nil {
		t.Error(err)
		return
	}
	_, err = Decrypt(privKey, cipherTextShortBytes)
	if err != ErrShortCiphertext {
		t.Error("Failed to catch too short ciphertext")
		return
	}
	ciphertextInvalidHex := "00000001b7f70c6921501ac65379ce0d99630e03b48d4d9a0c2298c5c02ff994c5b865bd10f7d4ab1aa2ff340ed837c3697f83a575d586a0fa48ea84cd8076bf11be5fd3d19d0e339a0b876b943acfe3bb3406888d2a2c510526dad6409fbacb8e29b9a34431941bfb29db00795ef3b26b9a0d00e92342181ac8236efba72e989c5aacbef7db1872b9b900e5144eb3528183bdebbb62fdbcc64ec132550f5184b7596d94cbfb24edae59b465ff101e91b4256f1da5529b161846597afa6eeb0d1747da10f24aa367e1913997113689f4d2758980c3d1674ec8b4ba9f3b084b382a7870789d8f1411d7fc41a86ef02481fa48c8f9b1a1b81022ece9a7f76884510a3502133a30b02b4f72329e4cb6bc97ac60d3c253757f5d5c541daf874f1789b0e22e7250fa1040e6f10cee66fa95073cd08953a2600b13f5046ba406b1d143760e861428235d37e0637416c7e0160dd6b830e19d2004ec39d2900b1d5bd1d0c0bb2c5b48e2200437fdb2d6f709296914d39f9f31a68007c27ee123843f08b751289247d7d65a0aa98218b708221518c74e6bc1386389dd345785abe72697fe1b89447e254113112aaee9353432007f0e3bb987b28bb56d2c3e92f9fc088d01147396a36317c1388e712571d5f7271f32b5aa94cc55d75dd5fc791c5dc4e5a2ba51817b27c1ef73441242d33b4670343ad2850e8b373536b4e9846eb51a8ca7ccaff9286b92f75c1c79c6872b995ea5e3ebd72df9169b486532aae16472edc571841667edf519ade6b87fbbd5ffe4811d8e0b48b4c1601a62c4052537869295f557"
	cipherTextInvalidBytes, err := hex.DecodeString(ciphertextInvalidHex)
	if err != nil {
		t.Error(err)
		return
	}
	_, err = Decrypt(privKey, cipherTextInvalidBytes)
	if err != rsa.ErrDecryption {
		t.Error("Failed to catch RSA drcyption error")
	}
}

func TestDecryptCurve25519(t *testing.T) {
	privKeyHex := "08011260e20c8d1e941df644b652af88c714f502c62ba19480e89837b67f21dd24dff4550d105e312db07495cbb516d69764c91107842de30f47dd591e9c69df16e4fd0d0d105e312db07495cbb516d69764c91107842de30f47dd591e9c69df16e4fd0d"
	ciphertextHex := "7974c0016a2bb90d6f132b666fc6c6e2955096a58f37b0e9a97bb43067e66dc21fe8dcc13a8534fcd27492e2fea85c002398c8f16698550b621da2a65d18cf66f6d4961380b051fe8408d8bd7f4cf3555e43eeb7e434"

	privKeyBytes, err := hex.DecodeString(privKeyHex)
	if err != nil {
		t.Error(err)
		return
	}
	privKey, err := libp2p.UnmarshalPrivateKey(privKeyBytes)
	if err != nil {
		t.Error(err)
		return
	}

	cipherTextBytes, err := hex.DecodeString(ciphertextHex)
	if err != nil {
		t.Error(err)
		return
	}
	plaintext, err := Decrypt(privKey, cipherTextBytes)
	if err != nil {
		t.Error(err)
		return
	}
	if "Hello World!!!" != string(plaintext) {
		t.Error("Result plaintext doesn't match original plaintext")
		return
	}

	ciphertextInvalidHex := "7974c0016a2bb90d6f132b666fc6c6e2955096a58f37b0e9a97bb43067e66dc21fe8dcc13a8534fcd27492e2fea85c002398c8f166bd7f4cf3555e43eeb7e434"
	cipherTextInvalidBytes, err := hex.DecodeString(ciphertextInvalidHex)
	if err != nil {
		t.Error(err)
		return
	}
	_, err = Decrypt(privKey, cipherTextInvalidBytes)
	if err != BoxDecryptionError {
		t.Error("Failed to catch curve25519 drcyption error")
	}
}
